Grammar

    0 $accept: program $end

    1 program: translation_unit

    2 translation_unit: external_declaration
    3                 | translation_unit external_declaration

    4 external_declaration: function_definition
    5                     | declaration

    6 function_definition: declaration_specifiers declarator compound_statement

    7 declaration: declaration_specifiers init_declarator_list T_SEMICOLON
    8            | declaration_specifiers T_SEMICOLON
    9            | T_TYPEDEF declaration_specifiers init_declarator_list T_SEMICOLON

   10 declaration_specifiers: type_specifier
   11                       | T_CONST declaration_specifiers
   12                       | T_STATIC declaration_specifiers
   13                       | T_EXTERN declaration_specifiers
   14                       | T_VOLATILE declaration_specifiers
   15                       | T_INLINE declaration_specifiers

   16 init_declarator_list: init_declarator
   17                     | init_declarator_list T_COMMA init_declarator

   18 init_declarator: declarator
   19                | declarator T_ASSIGN initializer

   20 declarator: pointer direct_declarator
   21           | direct_declarator

   22 direct_declarator: T_IDENTIFIER
   23                  | T_LPAREN declarator T_RPAREN
   24                  | direct_declarator T_LBRACKET conditional_expression T_RBRACKET
   25                  | direct_declarator T_LBRACKET T_RBRACKET
   26                  | direct_declarator T_LPAREN param_list T_RPAREN
   27                  | direct_declarator T_LPAREN T_RPAREN

   28 pointer: T_MUL
   29        | T_MUL pointer

   30 param_list: parameter_declaration
   31           | param_list T_COMMA parameter_declaration

   32 parameter_declaration: declaration_specifiers declarator
   33                      | declaration_specifiers abstract_declarator
   34                      | declaration_specifiers

   35 type_name: declaration_specifiers
   36          | declaration_specifiers abstract_declarator

   37 abstract_declarator: pointer
   38                    | direct_abstract_declarator
   39                    | pointer direct_abstract_declarator

   40 direct_abstract_declarator: T_LPAREN abstract_declarator T_RPAREN
   41                           | T_LBRACKET T_RBRACKET
   42                           | T_LBRACKET conditional_expression T_RBRACKET
   43                           | direct_abstract_declarator T_LBRACKET T_RBRACKET
   44                           | direct_abstract_declarator T_LBRACKET conditional_expression T_RBRACKET
   45                           | T_LPAREN T_RPAREN
   46                           | T_LPAREN param_list T_RPAREN
   47                           | direct_abstract_declarator T_LPAREN T_RPAREN
   48                           | direct_abstract_declarator T_LPAREN param_list T_RPAREN

   49 statement: labeled_statement
   50          | compound_statement
   51          | expression T_SEMICOLON
   52          | selection_statement
   53          | iteration_statement
   54          | jump_statement

   55 compound_statement: T_LBRACE T_RBRACE
   56                   | T_LBRACE block_item_list T_RBRACE

   57 block_item_list: block_item
   58                | block_item_list block_item

   59 block_item: declaration
   60           | statement

   61 labeled_statement: T_IDENTIFIER ':' statement
   62                  | T_CASE conditional_expression ':' statement
   63                  | T_DEFAULT ':' statement
   64                  | T_IDENTIFIER ':' T_SEMICOLON

   65 selection_statement: T_IF T_LPAREN expression T_RPAREN statement
   66                    | T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement
   67                    | T_SWITCH T_LPAREN expression T_RPAREN statement

   68 iteration_statement: T_WHILE T_LPAREN expression T_RPAREN statement
   69                    | T_DO statement T_WHILE T_LPAREN expression T_RPAREN T_SEMICOLON
   70                    | T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON T_RPAREN statement
   71                    | T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement
   72                    | T_FOR T_LPAREN declaration expression T_SEMICOLON T_RPAREN statement
   73                    | T_FOR T_LPAREN declaration expression T_SEMICOLON expression T_RPAREN statement

   74 jump_statement: T_GOTO T_IDENTIFIER T_SEMICOLON
   75               | T_CONTINUE T_SEMICOLON
   76               | T_BREAK T_SEMICOLON
   77               | T_RETURN T_SEMICOLON
   78               | T_RETURN expression T_SEMICOLON

   79 expression: assignment_expression
   80           | expression T_COMMA assignment_expression

   81 assignment_expression: conditional_expression
   82                      | unary_expression T_ASSIGN assignment_expression
   83                      | unary_expression T_ADD_ASSIGN assignment_expression
   84                      | unary_expression T_SUB_ASSIGN assignment_expression
   85                      | unary_expression T_MUL_ASSIGN assignment_expression
   86                      | unary_expression T_DIV_ASSIGN assignment_expression
   87                      | unary_expression T_MOD_ASSIGN assignment_expression

   88 conditional_expression: logical_or_expression
   89                       | logical_or_expression T_QUESTION expression T_COLON conditional_expression

   90 logical_or_expression: logical_and_expression
   91                      | logical_or_expression T_LOGICAL_OR logical_and_expression

   92 logical_and_expression: inclusive_or_expression
   93                       | logical_and_expression T_LOGICAL_AND inclusive_or_expression

   94 inclusive_or_expression: exclusive_or_expression
   95                        | inclusive_or_expression T_BITWISE_OR exclusive_or_expression

   96 exclusive_or_expression: and_expression
   97                        | exclusive_or_expression T_BITWISE_XOR and_expression

   98 and_expression: equality_expression
   99               | and_expression T_BITWISE_AND equality_expression

  100 equality_expression: relational_expression
  101                    | equality_expression T_EQ relational_expression
  102                    | equality_expression T_NE relational_expression

  103 relational_expression: shift_expression
  104                      | relational_expression T_LT shift_expression
  105                      | relational_expression T_GT shift_expression
  106                      | relational_expression T_LE shift_expression
  107                      | relational_expression T_GE shift_expression

  108 shift_expression: additive_expression
  109                 | shift_expression T_LSHIFT additive_expression
  110                 | shift_expression T_RSHIFT additive_expression

  111 additive_expression: multiplicative_expression
  112                    | additive_expression T_ADD multiplicative_expression
  113                    | additive_expression T_SUB multiplicative_expression

  114 multiplicative_expression: cast_expression
  115                          | multiplicative_expression T_MUL cast_expression
  116                          | multiplicative_expression T_DIV cast_expression
  117                          | multiplicative_expression T_MOD cast_expression

  118 cast_expression: unary_expression
  119                | T_LPAREN type_name T_RPAREN cast_expression

  120 unary_expression: postfix_expression
  121                 | T_INC unary_expression
  122                 | T_DEC unary_expression
  123                 | T_BITWISE_AND cast_expression
  124                 | T_MUL cast_expression
  125                 | T_ADD cast_expression
  126                 | T_SUB cast_expression
  127                 | T_BITWISE_NOT cast_expression
  128                 | T_LOGICAL_NOT cast_expression
  129                 | T_SIZEOF unary_expression
  130                 | T_SIZEOF T_LPAREN type_name T_RPAREN

  131 postfix_expression: primary_expression
  132                   | postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | postfix_expression T_LPAREN T_RPAREN
  134                   | postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | postfix_expression T_DOT T_IDENTIFIER
  136                   | postfix_expression T_ARROW T_IDENTIFIER
  137                   | postfix_expression T_INC
  138                   | postfix_expression T_DEC

  139 primary_expression: T_IDENTIFIER
  140                   | T_INTEGER
  141                   | T_FLOAT_LITERAL
  142                   | T_CHAR_LITERAL
  143                   | T_STRING_LITERAL
  144                   | T_LPAREN expression T_RPAREN

  145 argument_expression_list: assignment_expression
  146                         | argument_expression_list T_COMMA assignment_expression

  147 initializer: assignment_expression
  148            | T_LBRACE initializer_list T_RBRACE
  149            | T_LBRACE initializer_list T_COMMA T_RBRACE

  150 initializer_list: initializer
  151                 | initializer_list T_COMMA initializer

  152 type_specifier: T_VOID
  153               | T_CHAR
  154               | T_SHORT
  155               | T_INT
  156               | T_LONG
  157               | T_FLOAT
  158               | T_DOUBLE
  159               | T_SIGNED
  160               | T_UNSIGNED
  161               | struct_specifier
  162               | union_specifier
  163               | enum_specifier
  164               | T_TYPENAME

  165 struct_specifier: T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | T_STRUCT T_IDENTIFIER

  168 union_specifier: T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | T_UNION T_IDENTIFIER

  171 enum_specifier: T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | T_ENUM T_IDENTIFIER

  174 enumerator_list: enumerator
  175                | enumerator_list T_COMMA enumerator

  176 enumerator: T_IDENTIFIER
  177           | T_IDENTIFIER T_ASSIGN conditional_expression

  178 struct_declaration_list: struct_declaration
  179                        | struct_declaration_list struct_declaration

  180 struct_declaration: declaration_specifiers declarator_list T_SEMICOLON

  181 declarator_list: declarator
  182                | declarator_list T_COMMA declarator


Terminals, with rules where they appear

    $end (0) 0
    ':' (58) 61 62 63 64
    error (256)
    T_IDENTIFIER <string_value> (258) 22 61 64 74 135 136 139 165 167 168 170 171 173 176 177
    T_TYPENAME <string_value> (259) 164
    T_INTEGER <integer_value> (260) 140
    T_FLOAT_LITERAL <string_value> (261) 141
    T_CHAR_LITERAL <string_value> (262) 142
    T_STRING_LITERAL <string_value> (263) 143
    T_INT (264) 155
    T_RETURN (265) 77 78
    T_IF (266) 65 66
    T_ELSE (267) 66
    T_WHILE (268) 68 69
    T_FOR (269) 70 71 72 73
    T_SWITCH (270) 67
    T_CASE (271) 62
    T_DEFAULT (272) 63
    T_BREAK (273) 76
    T_DO (274) 69
    T_CONTINUE (275) 75
    T_GOTO (276) 74
    T_STRUCT (277) 165 166 167
    T_UNION (278) 168 169 170
    T_ENUM (279) 171 172 173
    T_CHAR (280) 153
    T_FLOAT (281) 157
    T_DOUBLE (282) 158
    T_VOID (283) 152
    T_SHORT (284) 154
    T_LONG (285) 156
    T_SIGNED (286) 159
    T_UNSIGNED (287) 160
    T_TYPEDEF (288) 9
    T_SIZEOF (289) 129 130
    T_CONST (290) 11
    T_STATIC (291) 12
    T_EXTERN (292) 13
    T_VOLATILE (293) 14
    T_INLINE (294) 15
    T_SEMICOLON (295) 7 8 9 51 64 69 70 71 72 73 74 75 76 77 78 180
    T_LPAREN (296) 23 26 27 40 45 46 47 48 65 66 67 68 69 70 71 72 73 119 130 133 134 144
    T_RPAREN (297) 23 26 27 40 45 46 47 48 65 66 67 68 69 70 71 72 73 119 130 133 134 144
    T_LBRACE (298) 55 56 148 149 165 166 168 169 171 172
    T_RBRACE (299) 55 56 148 149 165 166 168 169 171 172
    T_COMMA (300) 17 31 80 146 149 151 175 182
    T_LBRACKET (301) 24 25 41 42 43 44 132
    T_RBRACKET (302) 24 25 41 42 43 44 132
    T_DOT (303) 135
    T_ARROW (304) 136
    T_INC (305) 121 137
    T_DEC (306) 122 138
    T_LOGICAL_NOT (307) 128
    T_BITWISE_NOT (308) 127
    T_LOGICAL_AND (309) 93
    T_LOGICAL_OR (310) 91
    T_BITWISE_AND (311) 99 123
    T_BITWISE_OR (312) 95
    T_BITWISE_XOR (313) 97
    T_LSHIFT (314) 109
    T_RSHIFT (315) 110
    T_ASSIGN (316) 19 82 177
    T_ADD_ASSIGN (317) 83
    T_SUB_ASSIGN (318) 84
    T_MUL_ASSIGN (319) 85
    T_DIV_ASSIGN (320) 86
    T_MOD_ASSIGN (321) 87
    T_EQ (322) 101
    T_NE (323) 102
    T_GT (324) 105
    T_GE (325) 107
    T_LT (326) 104
    T_LE (327) 106
    T_ADD (328) 112 125
    T_SUB (329) 113 126
    T_MUL (330) 28 29 115 124
    T_DIV (331) 116
    T_MOD (332) 117
    T_QUESTION (333) 89
    T_COLON (334) 89
    T_IFX (335)


Nonterminals, with rules where they appear

    $accept (82)
        on left: 0
    program <node> (83)
        on left: 1
        on right: 0
    translation_unit <node> (84)
        on left: 2 3
        on right: 1 3
    external_declaration <node> (85)
        on left: 4 5
        on right: 2 3
    function_definition <node> (86)
        on left: 6
        on right: 4
    declaration <node> (87)
        on left: 7 8 9
        on right: 5 59 72 73
    declaration_specifiers <type> (88)
        on left: 10 11 12 13 14 15
        on right: 6 7 8 9 11 12 13 14 15 32 33 34 35 36 180
    init_declarator_list <node> (89)
        on left: 16 17
        on right: 7 9 17
    init_declarator <node> (90)
        on left: 18 19
        on right: 16 17
    declarator <node> (91)
        on left: 20 21
        on right: 6 18 19 23 32 181 182
    direct_declarator <node> (92)
        on left: 22 23 24 25 26 27
        on right: 20 21 24 25 26 27
    pointer <type> (93)
        on left: 28 29
        on right: 20 29 37 39
    param_list <node> (94)
        on left: 30 31
        on right: 26 31 46 48
    parameter_declaration <node> (95)
        on left: 32 33 34
        on right: 30 31
    type_name <type> (96)
        on left: 35 36
        on right: 119 130
    abstract_declarator <type> (97)
        on left: 37 38 39
        on right: 33 36 40
    direct_abstract_declarator <type> (98)
        on left: 40 41 42 43 44 45 46 47 48
        on right: 38 39 43 44 47 48
    statement <node> (99)
        on left: 49 50 51 52 53 54
        on right: 60 61 62 63 65 66 67 68 69 70 71 72 73
    compound_statement <node> (100)
        on left: 55 56
        on right: 6 50
    block_item_list <node> (101)
        on left: 57 58
        on right: 56 58
    block_item <node> (102)
        on left: 59 60
        on right: 57 58
    labeled_statement <node> (103)
        on left: 61 62 63 64
        on right: 49
    selection_statement <node> (104)
        on left: 65 66 67
        on right: 52
    iteration_statement <node> (105)
        on left: 68 69 70 71 72 73
        on right: 53
    jump_statement <node> (106)
        on left: 74 75 76 77 78
        on right: 54
    expression <node> (107)
        on left: 79 80
        on right: 51 65 66 67 68 69 70 71 72 73 78 80 89 132 144
    assignment_expression <node> (108)
        on left: 81 82 83 84 85 86 87
        on right: 79 80 82 83 84 85 86 87 145 146 147
    conditional_expression <node> (109)
        on left: 88 89
        on right: 24 42 44 62 81 89 177
    logical_or_expression <node> (110)
        on left: 90 91
        on right: 88 89 91
    logical_and_expression <node> (111)
        on left: 92 93
        on right: 90 91 93
    inclusive_or_expression <node> (112)
        on left: 94 95
        on right: 92 93 95
    exclusive_or_expression <node> (113)
        on left: 96 97
        on right: 94 95 97
    and_expression <node> (114)
        on left: 98 99
        on right: 96 97 99
    equality_expression <node> (115)
        on left: 100 101 102
        on right: 98 99 101 102
    relational_expression <node> (116)
        on left: 103 104 105 106 107
        on right: 100 101 102 104 105 106 107
    shift_expression <node> (117)
        on left: 108 109 110
        on right: 103 104 105 106 107 109 110
    additive_expression <node> (118)
        on left: 111 112 113
        on right: 108 109 110 112 113
    multiplicative_expression <node> (119)
        on left: 114 115 116 117
        on right: 111 112 113 115 116 117
    cast_expression <node> (120)
        on left: 118 119
        on right: 114 115 116 117 119 123 124 125 126 127 128
    unary_expression <node> (121)
        on left: 120 121 122 123 124 125 126 127 128 129 130
        on right: 82 83 84 85 86 87 118 121 122 129
    postfix_expression <node> (122)
        on left: 131 132 133 134 135 136 137 138
        on right: 120 132 133 134 135 136 137 138
    primary_expression <node> (123)
        on left: 139 140 141 142 143 144
        on right: 131
    argument_expression_list <node> (124)
        on left: 145 146
        on right: 134 146
    initializer <node> (125)
        on left: 147 148 149
        on right: 19 150 151
    initializer_list <node> (126)
        on left: 150 151
        on right: 148 149 151
    type_specifier <type> (127)
        on left: 152 153 154 155 156 157 158 159 160 161 162 163 164
        on right: 10
    struct_specifier <node> (128)
        on left: 165 166 167
        on right: 161
    union_specifier <node> (129)
        on left: 168 169 170
        on right: 162
    enum_specifier <node> (130)
        on left: 171 172 173
        on right: 163
    enumerator_list <node> (131)
        on left: 174 175
        on right: 171 172 175
    enumerator <node> (132)
        on left: 176 177
        on right: 174 175
    struct_declaration_list <node> (133)
        on left: 178 179
        on right: 165 166 168 169 179
    struct_declaration <node> (134)
        on left: 180
        on right: 178 179
    declarator_list <node> (135)
        on left: 181 182
        on right: 180 182


State 0

    0 $accept: • program $end
    1 program: • translation_unit
    2 translation_unit: • external_declaration
    3                 | • translation_unit external_declaration
    4 external_declaration: • function_definition
    5                     | • declaration
    6 function_definition: • declaration_specifiers declarator compound_statement
    7 declaration: • declaration_specifiers init_declarator_list T_SEMICOLON
    8            | • declaration_specifiers T_SEMICOLON
    9            | • T_TYPEDEF declaration_specifiers init_declarator_list T_SEMICOLON
   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_TYPEDEF   shift, and go to state 14
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19

    program                 go to state 20
    translation_unit        go to state 21
    external_declaration    go to state 22
    function_definition     go to state 23
    declaration             go to state 24
    declaration_specifiers  go to state 25
    type_specifier          go to state 26
    struct_specifier        go to state 27
    union_specifier         go to state 28
    enum_specifier          go to state 29


State 1

  164 type_specifier: T_TYPENAME •

    $default  reduce using rule 164 (type_specifier)


State 2

  155 type_specifier: T_INT •

    $default  reduce using rule 155 (type_specifier)


State 3

  165 struct_specifier: T_STRUCT • T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | T_STRUCT • T_LBRACE struct_declaration_list T_RBRACE
  167                 | T_STRUCT • T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 30
    T_LBRACE      shift, and go to state 31


State 4

  168 union_specifier: T_UNION • T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | T_UNION • T_LBRACE struct_declaration_list T_RBRACE
  170                | T_UNION • T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 32
    T_LBRACE      shift, and go to state 33


State 5

  171 enum_specifier: T_ENUM • T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | T_ENUM • T_LBRACE enumerator_list T_RBRACE
  173               | T_ENUM • T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 34
    T_LBRACE      shift, and go to state 35


State 6

  153 type_specifier: T_CHAR •

    $default  reduce using rule 153 (type_specifier)


State 7

  157 type_specifier: T_FLOAT •

    $default  reduce using rule 157 (type_specifier)


State 8

  158 type_specifier: T_DOUBLE •

    $default  reduce using rule 158 (type_specifier)


State 9

  152 type_specifier: T_VOID •

    $default  reduce using rule 152 (type_specifier)


State 10

  154 type_specifier: T_SHORT •

    $default  reduce using rule 154 (type_specifier)


State 11

  156 type_specifier: T_LONG •

    $default  reduce using rule 156 (type_specifier)


State 12

  159 type_specifier: T_SIGNED •

    $default  reduce using rule 159 (type_specifier)


State 13

  160 type_specifier: T_UNSIGNED •

    $default  reduce using rule 160 (type_specifier)


State 14

    9 declaration: T_TYPEDEF • declaration_specifiers init_declarator_list T_SEMICOLON
   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19

    declaration_specifiers  go to state 36
    type_specifier          go to state 26
    struct_specifier        go to state 27
    union_specifier         go to state 28
    enum_specifier          go to state 29


State 15

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   11                       | T_CONST • declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19

    declaration_specifiers  go to state 37
    type_specifier          go to state 26
    struct_specifier        go to state 27
    union_specifier         go to state 28
    enum_specifier          go to state 29


State 16

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   12                       | T_STATIC • declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19

    declaration_specifiers  go to state 38
    type_specifier          go to state 26
    struct_specifier        go to state 27
    union_specifier         go to state 28
    enum_specifier          go to state 29


State 17

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   13                       | T_EXTERN • declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19

    declaration_specifiers  go to state 39
    type_specifier          go to state 26
    struct_specifier        go to state 27
    union_specifier         go to state 28
    enum_specifier          go to state 29


State 18

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   14                       | T_VOLATILE • declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19

    declaration_specifiers  go to state 40
    type_specifier          go to state 26
    struct_specifier        go to state 27
    union_specifier         go to state 28
    enum_specifier          go to state 29


State 19

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
   15                       | T_INLINE • declaration_specifiers
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19

    declaration_specifiers  go to state 41
    type_specifier          go to state 26
    struct_specifier        go to state 27
    union_specifier         go to state 28
    enum_specifier          go to state 29


State 20

    0 $accept: program • $end

    $end  shift, and go to state 42


State 21

    1 program: translation_unit •  [$end]
    3 translation_unit: translation_unit • external_declaration
    4 external_declaration: • function_definition
    5                     | • declaration
    6 function_definition: • declaration_specifiers declarator compound_statement
    7 declaration: • declaration_specifiers init_declarator_list T_SEMICOLON
    8            | • declaration_specifiers T_SEMICOLON
    9            | • T_TYPEDEF declaration_specifiers init_declarator_list T_SEMICOLON
   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_TYPEDEF   shift, and go to state 14
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19

    $default  reduce using rule 1 (program)

    external_declaration    go to state 43
    function_definition     go to state 23
    declaration             go to state 24
    declaration_specifiers  go to state 25
    type_specifier          go to state 26
    struct_specifier        go to state 27
    union_specifier         go to state 28
    enum_specifier          go to state 29


State 22

    2 translation_unit: external_declaration •

    $default  reduce using rule 2 (translation_unit)


State 23

    4 external_declaration: function_definition •

    $default  reduce using rule 4 (external_declaration)


State 24

    5 external_declaration: declaration •

    $default  reduce using rule 5 (external_declaration)


State 25

    6 function_definition: declaration_specifiers • declarator compound_statement
    7 declaration: declaration_specifiers • init_declarator_list T_SEMICOLON
    8            | declaration_specifiers • T_SEMICOLON
   16 init_declarator_list: • init_declarator
   17                     | • init_declarator_list T_COMMA init_declarator
   18 init_declarator: • declarator
   19                | • declarator T_ASSIGN initializer
   20 declarator: • pointer direct_declarator
   21           | • direct_declarator
   22 direct_declarator: • T_IDENTIFIER
   23                  | • T_LPAREN declarator T_RPAREN
   24                  | • direct_declarator T_LBRACKET conditional_expression T_RBRACKET
   25                  | • direct_declarator T_LBRACKET T_RBRACKET
   26                  | • direct_declarator T_LPAREN param_list T_RPAREN
   27                  | • direct_declarator T_LPAREN T_RPAREN
   28 pointer: • T_MUL
   29        | • T_MUL pointer

    T_IDENTIFIER  shift, and go to state 44
    T_SEMICOLON   shift, and go to state 45
    T_LPAREN      shift, and go to state 46
    T_MUL         shift, and go to state 47

    init_declarator_list  go to state 48
    init_declarator       go to state 49
    declarator            go to state 50
    direct_declarator     go to state 51
    pointer               go to state 52


State 26

   10 declaration_specifiers: type_specifier •

    $default  reduce using rule 10 (declaration_specifiers)


State 27

  161 type_specifier: struct_specifier •

    $default  reduce using rule 161 (type_specifier)


State 28

  162 type_specifier: union_specifier •

    $default  reduce using rule 162 (type_specifier)


State 29

  163 type_specifier: enum_specifier •

    $default  reduce using rule 163 (type_specifier)


State 30

  165 struct_specifier: T_STRUCT T_IDENTIFIER • T_LBRACE struct_declaration_list T_RBRACE
  167                 | T_STRUCT T_IDENTIFIER •  [T_IDENTIFIER, T_SEMICOLON, T_LPAREN, T_RPAREN, T_COMMA, T_LBRACKET, T_MUL]

    T_LBRACE  shift, and go to state 53

    $default  reduce using rule 167 (struct_specifier)


State 31

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  166                 | T_STRUCT T_LBRACE • struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER
  178 struct_declaration_list: • struct_declaration
  179                        | • struct_declaration_list struct_declaration
  180 struct_declaration: • declaration_specifiers declarator_list T_SEMICOLON

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19

    declaration_specifiers   go to state 54
    type_specifier           go to state 26
    struct_specifier         go to state 27
    union_specifier          go to state 28
    enum_specifier           go to state 29
    struct_declaration_list  go to state 55
    struct_declaration       go to state 56


State 32

  168 union_specifier: T_UNION T_IDENTIFIER • T_LBRACE struct_declaration_list T_RBRACE
  170                | T_UNION T_IDENTIFIER •  [T_IDENTIFIER, T_SEMICOLON, T_LPAREN, T_RPAREN, T_COMMA, T_LBRACKET, T_MUL]

    T_LBRACE  shift, and go to state 57

    $default  reduce using rule 170 (union_specifier)


State 33

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  169                | T_UNION T_LBRACE • struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER
  178 struct_declaration_list: • struct_declaration
  179                        | • struct_declaration_list struct_declaration
  180 struct_declaration: • declaration_specifiers declarator_list T_SEMICOLON

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19

    declaration_specifiers   go to state 54
    type_specifier           go to state 26
    struct_specifier         go to state 27
    union_specifier          go to state 28
    enum_specifier           go to state 29
    struct_declaration_list  go to state 58
    struct_declaration       go to state 56


State 34

  171 enum_specifier: T_ENUM T_IDENTIFIER • T_LBRACE enumerator_list T_RBRACE
  173               | T_ENUM T_IDENTIFIER •  [T_IDENTIFIER, T_SEMICOLON, T_LPAREN, T_RPAREN, T_COMMA, T_LBRACKET, T_MUL]

    T_LBRACE  shift, and go to state 59

    $default  reduce using rule 173 (enum_specifier)


State 35

  172 enum_specifier: T_ENUM T_LBRACE • enumerator_list T_RBRACE
  174 enumerator_list: • enumerator
  175                | • enumerator_list T_COMMA enumerator
  176 enumerator: • T_IDENTIFIER
  177           | • T_IDENTIFIER T_ASSIGN conditional_expression

    T_IDENTIFIER  shift, and go to state 60

    enumerator_list  go to state 61
    enumerator       go to state 62


State 36

    9 declaration: T_TYPEDEF declaration_specifiers • init_declarator_list T_SEMICOLON
   16 init_declarator_list: • init_declarator
   17                     | • init_declarator_list T_COMMA init_declarator
   18 init_declarator: • declarator
   19                | • declarator T_ASSIGN initializer
   20 declarator: • pointer direct_declarator
   21           | • direct_declarator
   22 direct_declarator: • T_IDENTIFIER
   23                  | • T_LPAREN declarator T_RPAREN
   24                  | • direct_declarator T_LBRACKET conditional_expression T_RBRACKET
   25                  | • direct_declarator T_LBRACKET T_RBRACKET
   26                  | • direct_declarator T_LPAREN param_list T_RPAREN
   27                  | • direct_declarator T_LPAREN T_RPAREN
   28 pointer: • T_MUL
   29        | • T_MUL pointer

    T_IDENTIFIER  shift, and go to state 44
    T_LPAREN      shift, and go to state 46
    T_MUL         shift, and go to state 47

    init_declarator_list  go to state 63
    init_declarator       go to state 49
    declarator            go to state 64
    direct_declarator     go to state 51
    pointer               go to state 52


State 37

   11 declaration_specifiers: T_CONST declaration_specifiers •

    $default  reduce using rule 11 (declaration_specifiers)


State 38

   12 declaration_specifiers: T_STATIC declaration_specifiers •

    $default  reduce using rule 12 (declaration_specifiers)


State 39

   13 declaration_specifiers: T_EXTERN declaration_specifiers •

    $default  reduce using rule 13 (declaration_specifiers)


State 40

   14 declaration_specifiers: T_VOLATILE declaration_specifiers •

    $default  reduce using rule 14 (declaration_specifiers)


State 41

   15 declaration_specifiers: T_INLINE declaration_specifiers •

    $default  reduce using rule 15 (declaration_specifiers)


State 42

    0 $accept: program $end •

    $default  accept


State 43

    3 translation_unit: translation_unit external_declaration •

    $default  reduce using rule 3 (translation_unit)


State 44

   22 direct_declarator: T_IDENTIFIER •

    $default  reduce using rule 22 (direct_declarator)


State 45

    8 declaration: declaration_specifiers T_SEMICOLON •

    $default  reduce using rule 8 (declaration)


State 46

   20 declarator: • pointer direct_declarator
   21           | • direct_declarator
   22 direct_declarator: • T_IDENTIFIER
   23                  | • T_LPAREN declarator T_RPAREN
   23                  | T_LPAREN • declarator T_RPAREN
   24                  | • direct_declarator T_LBRACKET conditional_expression T_RBRACKET
   25                  | • direct_declarator T_LBRACKET T_RBRACKET
   26                  | • direct_declarator T_LPAREN param_list T_RPAREN
   27                  | • direct_declarator T_LPAREN T_RPAREN
   28 pointer: • T_MUL
   29        | • T_MUL pointer

    T_IDENTIFIER  shift, and go to state 44
    T_LPAREN      shift, and go to state 46
    T_MUL         shift, and go to state 47

    declarator         go to state 65
    direct_declarator  go to state 51
    pointer            go to state 52


State 47

   28 pointer: • T_MUL
   28        | T_MUL •  [T_IDENTIFIER, T_LPAREN, T_RPAREN, T_COMMA, T_LBRACKET]
   29        | • T_MUL pointer
   29        | T_MUL • pointer

    T_MUL  shift, and go to state 47

    $default  reduce using rule 28 (pointer)

    pointer  go to state 66


State 48

    7 declaration: declaration_specifiers init_declarator_list • T_SEMICOLON
   17 init_declarator_list: init_declarator_list • T_COMMA init_declarator

    T_SEMICOLON  shift, and go to state 67
    T_COMMA      shift, and go to state 68


State 49

   16 init_declarator_list: init_declarator •

    $default  reduce using rule 16 (init_declarator_list)


State 50

    6 function_definition: declaration_specifiers declarator • compound_statement
   18 init_declarator: declarator •  [T_SEMICOLON, T_COMMA]
   19                | declarator • T_ASSIGN initializer
   55 compound_statement: • T_LBRACE T_RBRACE
   56                   | • T_LBRACE block_item_list T_RBRACE

    T_LBRACE  shift, and go to state 69
    T_ASSIGN  shift, and go to state 70

    $default  reduce using rule 18 (init_declarator)

    compound_statement  go to state 71


State 51

   21 declarator: direct_declarator •  [T_SEMICOLON, T_RPAREN, T_LBRACE, T_COMMA, T_ASSIGN]
   24 direct_declarator: direct_declarator • T_LBRACKET conditional_expression T_RBRACKET
   25                  | direct_declarator • T_LBRACKET T_RBRACKET
   26                  | direct_declarator • T_LPAREN param_list T_RPAREN
   27                  | direct_declarator • T_LPAREN T_RPAREN

    T_LPAREN    shift, and go to state 72
    T_LBRACKET  shift, and go to state 73

    $default  reduce using rule 21 (declarator)


State 52

   20 declarator: pointer • direct_declarator
   22 direct_declarator: • T_IDENTIFIER
   23                  | • T_LPAREN declarator T_RPAREN
   24                  | • direct_declarator T_LBRACKET conditional_expression T_RBRACKET
   25                  | • direct_declarator T_LBRACKET T_RBRACKET
   26                  | • direct_declarator T_LPAREN param_list T_RPAREN
   27                  | • direct_declarator T_LPAREN T_RPAREN

    T_IDENTIFIER  shift, and go to state 44
    T_LPAREN      shift, and go to state 46

    direct_declarator  go to state 74


State 53

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  165                 | T_STRUCT T_IDENTIFIER T_LBRACE • struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER
  178 struct_declaration_list: • struct_declaration
  179                        | • struct_declaration_list struct_declaration
  180 struct_declaration: • declaration_specifiers declarator_list T_SEMICOLON

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19

    declaration_specifiers   go to state 54
    type_specifier           go to state 26
    struct_specifier         go to state 27
    union_specifier          go to state 28
    enum_specifier           go to state 29
    struct_declaration_list  go to state 75
    struct_declaration       go to state 56


State 54

   20 declarator: • pointer direct_declarator
   21           | • direct_declarator
   22 direct_declarator: • T_IDENTIFIER
   23                  | • T_LPAREN declarator T_RPAREN
   24                  | • direct_declarator T_LBRACKET conditional_expression T_RBRACKET
   25                  | • direct_declarator T_LBRACKET T_RBRACKET
   26                  | • direct_declarator T_LPAREN param_list T_RPAREN
   27                  | • direct_declarator T_LPAREN T_RPAREN
   28 pointer: • T_MUL
   29        | • T_MUL pointer
  180 struct_declaration: declaration_specifiers • declarator_list T_SEMICOLON
  181 declarator_list: • declarator
  182                | • declarator_list T_COMMA declarator

    T_IDENTIFIER  shift, and go to state 44
    T_LPAREN      shift, and go to state 46
    T_MUL         shift, and go to state 47

    declarator         go to state 76
    direct_declarator  go to state 51
    pointer            go to state 52
    declarator_list    go to state 77


State 55

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  166                 | T_STRUCT T_LBRACE struct_declaration_list • T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER
  179 struct_declaration_list: struct_declaration_list • struct_declaration
  180 struct_declaration: • declaration_specifiers declarator_list T_SEMICOLON

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19
    T_RBRACE    shift, and go to state 78

    declaration_specifiers  go to state 54
    type_specifier          go to state 26
    struct_specifier        go to state 27
    union_specifier         go to state 28
    enum_specifier          go to state 29
    struct_declaration      go to state 79


State 56

  178 struct_declaration_list: struct_declaration •

    $default  reduce using rule 178 (struct_declaration_list)


State 57

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  168                | T_UNION T_IDENTIFIER T_LBRACE • struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER
  178 struct_declaration_list: • struct_declaration
  179                        | • struct_declaration_list struct_declaration
  180 struct_declaration: • declaration_specifiers declarator_list T_SEMICOLON

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19

    declaration_specifiers   go to state 54
    type_specifier           go to state 26
    struct_specifier         go to state 27
    union_specifier          go to state 28
    enum_specifier           go to state 29
    struct_declaration_list  go to state 80
    struct_declaration       go to state 56


State 58

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  169                | T_UNION T_LBRACE struct_declaration_list • T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER
  179 struct_declaration_list: struct_declaration_list • struct_declaration
  180 struct_declaration: • declaration_specifiers declarator_list T_SEMICOLON

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19
    T_RBRACE    shift, and go to state 81

    declaration_specifiers  go to state 54
    type_specifier          go to state 26
    struct_specifier        go to state 27
    union_specifier         go to state 28
    enum_specifier          go to state 29
    struct_declaration      go to state 79


State 59

  171 enum_specifier: T_ENUM T_IDENTIFIER T_LBRACE • enumerator_list T_RBRACE
  174 enumerator_list: • enumerator
  175                | • enumerator_list T_COMMA enumerator
  176 enumerator: • T_IDENTIFIER
  177           | • T_IDENTIFIER T_ASSIGN conditional_expression

    T_IDENTIFIER  shift, and go to state 60

    enumerator_list  go to state 82
    enumerator       go to state 62


State 60

  176 enumerator: T_IDENTIFIER •  [T_RBRACE, T_COMMA]
  177           | T_IDENTIFIER • T_ASSIGN conditional_expression

    T_ASSIGN  shift, and go to state 83

    $default  reduce using rule 176 (enumerator)


State 61

  172 enum_specifier: T_ENUM T_LBRACE enumerator_list • T_RBRACE
  175 enumerator_list: enumerator_list • T_COMMA enumerator

    T_RBRACE  shift, and go to state 84
    T_COMMA   shift, and go to state 85


State 62

  174 enumerator_list: enumerator •

    $default  reduce using rule 174 (enumerator_list)


State 63

    9 declaration: T_TYPEDEF declaration_specifiers init_declarator_list • T_SEMICOLON
   17 init_declarator_list: init_declarator_list • T_COMMA init_declarator

    T_SEMICOLON  shift, and go to state 86
    T_COMMA      shift, and go to state 68


State 64

   18 init_declarator: declarator •  [T_SEMICOLON, T_COMMA]
   19                | declarator • T_ASSIGN initializer

    T_ASSIGN  shift, and go to state 70

    $default  reduce using rule 18 (init_declarator)


State 65

   23 direct_declarator: T_LPAREN declarator • T_RPAREN

    T_RPAREN  shift, and go to state 87


State 66

   29 pointer: T_MUL pointer •

    $default  reduce using rule 29 (pointer)


State 67

    7 declaration: declaration_specifiers init_declarator_list T_SEMICOLON •

    $default  reduce using rule 7 (declaration)


State 68

   17 init_declarator_list: init_declarator_list T_COMMA • init_declarator
   18 init_declarator: • declarator
   19                | • declarator T_ASSIGN initializer
   20 declarator: • pointer direct_declarator
   21           | • direct_declarator
   22 direct_declarator: • T_IDENTIFIER
   23                  | • T_LPAREN declarator T_RPAREN
   24                  | • direct_declarator T_LBRACKET conditional_expression T_RBRACKET
   25                  | • direct_declarator T_LBRACKET T_RBRACKET
   26                  | • direct_declarator T_LPAREN param_list T_RPAREN
   27                  | • direct_declarator T_LPAREN T_RPAREN
   28 pointer: • T_MUL
   29        | • T_MUL pointer

    T_IDENTIFIER  shift, and go to state 44
    T_LPAREN      shift, and go to state 46
    T_MUL         shift, and go to state 47

    init_declarator    go to state 88
    declarator         go to state 64
    direct_declarator  go to state 51
    pointer            go to state 52


State 69

    7 declaration: • declaration_specifiers init_declarator_list T_SEMICOLON
    8            | • declaration_specifiers T_SEMICOLON
    9            | • T_TYPEDEF declaration_specifiers init_declarator_list T_SEMICOLON
   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
   49 statement: • labeled_statement
   50          | • compound_statement
   51          | • expression T_SEMICOLON
   52          | • selection_statement
   53          | • iteration_statement
   54          | • jump_statement
   55 compound_statement: • T_LBRACE T_RBRACE
   55                   | T_LBRACE • T_RBRACE
   56                   | • T_LBRACE block_item_list T_RBRACE
   56                   | T_LBRACE • block_item_list T_RBRACE
   57 block_item_list: • block_item
   58                | • block_item_list block_item
   59 block_item: • declaration
   60           | • statement
   61 labeled_statement: • T_IDENTIFIER ':' statement
   62                  | • T_CASE conditional_expression ':' statement
   63                  | • T_DEFAULT ':' statement
   64                  | • T_IDENTIFIER ':' T_SEMICOLON
   65 selection_statement: • T_IF T_LPAREN expression T_RPAREN statement
   66                    | • T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement
   67                    | • T_SWITCH T_LPAREN expression T_RPAREN statement
   68 iteration_statement: • T_WHILE T_LPAREN expression T_RPAREN statement
   69                    | • T_DO statement T_WHILE T_LPAREN expression T_RPAREN T_SEMICOLON
   70                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON T_RPAREN statement
   71                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement
   72                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON T_RPAREN statement
   73                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON expression T_RPAREN statement
   74 jump_statement: • T_GOTO T_IDENTIFIER T_SEMICOLON
   75               | • T_CONTINUE T_SEMICOLON
   76               | • T_BREAK T_SEMICOLON
   77               | • T_RETURN T_SEMICOLON
   78               | • T_RETURN expression T_SEMICOLON
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER

    T_IDENTIFIER      shift, and go to state 89
    T_TYPENAME        shift, and go to state 1
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_INT             shift, and go to state 2
    T_RETURN          shift, and go to state 94
    T_IF              shift, and go to state 95
    T_WHILE           shift, and go to state 96
    T_FOR             shift, and go to state 97
    T_SWITCH          shift, and go to state 98
    T_CASE            shift, and go to state 99
    T_DEFAULT         shift, and go to state 100
    T_BREAK           shift, and go to state 101
    T_DO              shift, and go to state 102
    T_CONTINUE        shift, and go to state 103
    T_GOTO            shift, and go to state 104
    T_STRUCT          shift, and go to state 3
    T_UNION           shift, and go to state 4
    T_ENUM            shift, and go to state 5
    T_CHAR            shift, and go to state 6
    T_FLOAT           shift, and go to state 7
    T_DOUBLE          shift, and go to state 8
    T_VOID            shift, and go to state 9
    T_SHORT           shift, and go to state 10
    T_LONG            shift, and go to state 11
    T_SIGNED          shift, and go to state 12
    T_UNSIGNED        shift, and go to state 13
    T_TYPEDEF         shift, and go to state 14
    T_SIZEOF          shift, and go to state 105
    T_CONST           shift, and go to state 15
    T_STATIC          shift, and go to state 16
    T_EXTERN          shift, and go to state 17
    T_VOLATILE        shift, and go to state 18
    T_INLINE          shift, and go to state 19
    T_LPAREN          shift, and go to state 106
    T_LBRACE          shift, and go to state 69
    T_RBRACE          shift, and go to state 107
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    declaration                go to state 116
    declaration_specifiers     go to state 117
    statement                  go to state 118
    compound_statement         go to state 119
    block_item_list            go to state 120
    block_item                 go to state 121
    labeled_statement          go to state 122
    selection_statement        go to state 123
    iteration_statement        go to state 124
    jump_statement             go to state 125
    expression                 go to state 126
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142
    type_specifier             go to state 26
    struct_specifier           go to state 27
    union_specifier            go to state 28
    enum_specifier             go to state 29


State 70

   19 init_declarator: declarator T_ASSIGN • initializer
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN
  147 initializer: • assignment_expression
  148            | • T_LBRACE initializer_list T_RBRACE
  149            | • T_LBRACE initializer_list T_COMMA T_RBRACE

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_LBRACE          shift, and go to state 144
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    assignment_expression      go to state 145
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142
    initializer                go to state 146


State 71

    6 function_definition: declaration_specifiers declarator compound_statement •

    $default  reduce using rule 6 (function_definition)


State 72

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
   26 direct_declarator: direct_declarator T_LPAREN • param_list T_RPAREN
   27                  | direct_declarator T_LPAREN • T_RPAREN
   30 param_list: • parameter_declaration
   31           | • param_list T_COMMA parameter_declaration
   32 parameter_declaration: • declaration_specifiers declarator
   33                      | • declaration_specifiers abstract_declarator
   34                      | • declaration_specifiers
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19
    T_RPAREN    shift, and go to state 147

    declaration_specifiers  go to state 148
    param_list              go to state 149
    parameter_declaration   go to state 150
    type_specifier          go to state 26
    struct_specifier        go to state 27
    union_specifier         go to state 28
    enum_specifier          go to state 29


State 73

   24 direct_declarator: direct_declarator T_LBRACKET • conditional_expression T_RBRACKET
   25                  | direct_declarator T_LBRACKET • T_RBRACKET
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_RBRACKET        shift, and go to state 151
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    conditional_expression     go to state 152
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 74

   20 declarator: pointer direct_declarator •  [T_SEMICOLON, T_RPAREN, T_LBRACE, T_COMMA, T_ASSIGN]
   24 direct_declarator: direct_declarator • T_LBRACKET conditional_expression T_RBRACKET
   25                  | direct_declarator • T_LBRACKET T_RBRACKET
   26                  | direct_declarator • T_LPAREN param_list T_RPAREN
   27                  | direct_declarator • T_LPAREN T_RPAREN

    T_LPAREN    shift, and go to state 72
    T_LBRACKET  shift, and go to state 73

    $default  reduce using rule 20 (declarator)


State 75

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  165                 | T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list • T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER
  179 struct_declaration_list: struct_declaration_list • struct_declaration
  180 struct_declaration: • declaration_specifiers declarator_list T_SEMICOLON

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19
    T_RBRACE    shift, and go to state 154

    declaration_specifiers  go to state 54
    type_specifier          go to state 26
    struct_specifier        go to state 27
    union_specifier         go to state 28
    enum_specifier          go to state 29
    struct_declaration      go to state 79


State 76

  181 declarator_list: declarator •

    $default  reduce using rule 181 (declarator_list)


State 77

  180 struct_declaration: declaration_specifiers declarator_list • T_SEMICOLON
  182 declarator_list: declarator_list • T_COMMA declarator

    T_SEMICOLON  shift, and go to state 155
    T_COMMA      shift, and go to state 156


State 78

  166 struct_specifier: T_STRUCT T_LBRACE struct_declaration_list T_RBRACE •

    $default  reduce using rule 166 (struct_specifier)


State 79

  179 struct_declaration_list: struct_declaration_list struct_declaration •

    $default  reduce using rule 179 (struct_declaration_list)


State 80

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  168                | T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list • T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER
  179 struct_declaration_list: struct_declaration_list • struct_declaration
  180 struct_declaration: • declaration_specifiers declarator_list T_SEMICOLON

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19
    T_RBRACE    shift, and go to state 157

    declaration_specifiers  go to state 54
    type_specifier          go to state 26
    struct_specifier        go to state 27
    union_specifier         go to state 28
    enum_specifier          go to state 29
    struct_declaration      go to state 79


State 81

  169 union_specifier: T_UNION T_LBRACE struct_declaration_list T_RBRACE •

    $default  reduce using rule 169 (union_specifier)


State 82

  171 enum_specifier: T_ENUM T_IDENTIFIER T_LBRACE enumerator_list • T_RBRACE
  175 enumerator_list: enumerator_list • T_COMMA enumerator

    T_RBRACE  shift, and go to state 158
    T_COMMA   shift, and go to state 85


State 83

   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN
  177 enumerator: T_IDENTIFIER T_ASSIGN • conditional_expression

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    conditional_expression     go to state 159
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 84

  172 enum_specifier: T_ENUM T_LBRACE enumerator_list T_RBRACE •

    $default  reduce using rule 172 (enum_specifier)


State 85

  175 enumerator_list: enumerator_list T_COMMA • enumerator
  176 enumerator: • T_IDENTIFIER
  177           | • T_IDENTIFIER T_ASSIGN conditional_expression

    T_IDENTIFIER  shift, and go to state 60

    enumerator  go to state 160


State 86

    9 declaration: T_TYPEDEF declaration_specifiers init_declarator_list T_SEMICOLON •

    $default  reduce using rule 9 (declaration)


State 87

   23 direct_declarator: T_LPAREN declarator T_RPAREN •

    $default  reduce using rule 23 (direct_declarator)


State 88

   17 init_declarator_list: init_declarator_list T_COMMA init_declarator •

    $default  reduce using rule 17 (init_declarator_list)


State 89

   61 labeled_statement: T_IDENTIFIER • ':' statement
   64                  | T_IDENTIFIER • ':' T_SEMICOLON
  139 primary_expression: T_IDENTIFIER •  [T_SEMICOLON, T_LPAREN, T_COMMA, T_LBRACKET, T_DOT, T_ARROW, T_INC, T_DEC, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_LSHIFT, T_RSHIFT, T_ASSIGN, T_ADD_ASSIGN, T_SUB_ASSIGN, T_MUL_ASSIGN, T_DIV_ASSIGN, T_MOD_ASSIGN, T_EQ, T_NE, T_GT, T_GE, T_LT, T_LE, T_ADD, T_SUB, T_MUL, T_DIV, T_MOD, T_QUESTION]

    ':'  shift, and go to state 161

    $default  reduce using rule 139 (primary_expression)


State 90

  140 primary_expression: T_INTEGER •

    $default  reduce using rule 140 (primary_expression)


State 91

  141 primary_expression: T_FLOAT_LITERAL •

    $default  reduce using rule 141 (primary_expression)


State 92

  142 primary_expression: T_CHAR_LITERAL •

    $default  reduce using rule 142 (primary_expression)


State 93

  143 primary_expression: T_STRING_LITERAL •

    $default  reduce using rule 143 (primary_expression)


State 94

   77 jump_statement: T_RETURN • T_SEMICOLON
   78               | T_RETURN • expression T_SEMICOLON
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_SEMICOLON       shift, and go to state 162
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    expression                 go to state 163
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 95

   65 selection_statement: T_IF • T_LPAREN expression T_RPAREN statement
   66                    | T_IF • T_LPAREN expression T_RPAREN statement T_ELSE statement

    T_LPAREN  shift, and go to state 164


State 96

   68 iteration_statement: T_WHILE • T_LPAREN expression T_RPAREN statement

    T_LPAREN  shift, and go to state 165


State 97

   70 iteration_statement: T_FOR • T_LPAREN expression T_SEMICOLON expression T_SEMICOLON T_RPAREN statement
   71                    | T_FOR • T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement
   72                    | T_FOR • T_LPAREN declaration expression T_SEMICOLON T_RPAREN statement
   73                    | T_FOR • T_LPAREN declaration expression T_SEMICOLON expression T_RPAREN statement

    T_LPAREN  shift, and go to state 166


State 98

   67 selection_statement: T_SWITCH • T_LPAREN expression T_RPAREN statement

    T_LPAREN  shift, and go to state 167


State 99

   62 labeled_statement: T_CASE • conditional_expression ':' statement
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    conditional_expression     go to state 168
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 100

   63 labeled_statement: T_DEFAULT • ':' statement

    ':'  shift, and go to state 169


State 101

   76 jump_statement: T_BREAK • T_SEMICOLON

    T_SEMICOLON  shift, and go to state 170


State 102

   49 statement: • labeled_statement
   50          | • compound_statement
   51          | • expression T_SEMICOLON
   52          | • selection_statement
   53          | • iteration_statement
   54          | • jump_statement
   55 compound_statement: • T_LBRACE T_RBRACE
   56                   | • T_LBRACE block_item_list T_RBRACE
   61 labeled_statement: • T_IDENTIFIER ':' statement
   62                  | • T_CASE conditional_expression ':' statement
   63                  | • T_DEFAULT ':' statement
   64                  | • T_IDENTIFIER ':' T_SEMICOLON
   65 selection_statement: • T_IF T_LPAREN expression T_RPAREN statement
   66                    | • T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement
   67                    | • T_SWITCH T_LPAREN expression T_RPAREN statement
   68 iteration_statement: • T_WHILE T_LPAREN expression T_RPAREN statement
   69                    | • T_DO statement T_WHILE T_LPAREN expression T_RPAREN T_SEMICOLON
   69                    | T_DO • statement T_WHILE T_LPAREN expression T_RPAREN T_SEMICOLON
   70                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON T_RPAREN statement
   71                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement
   72                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON T_RPAREN statement
   73                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON expression T_RPAREN statement
   74 jump_statement: • T_GOTO T_IDENTIFIER T_SEMICOLON
   75               | • T_CONTINUE T_SEMICOLON
   76               | • T_BREAK T_SEMICOLON
   77               | • T_RETURN T_SEMICOLON
   78               | • T_RETURN expression T_SEMICOLON
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 89
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_RETURN          shift, and go to state 94
    T_IF              shift, and go to state 95
    T_WHILE           shift, and go to state 96
    T_FOR             shift, and go to state 97
    T_SWITCH          shift, and go to state 98
    T_CASE            shift, and go to state 99
    T_DEFAULT         shift, and go to state 100
    T_BREAK           shift, and go to state 101
    T_DO              shift, and go to state 102
    T_CONTINUE        shift, and go to state 103
    T_GOTO            shift, and go to state 104
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_LBRACE          shift, and go to state 69
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    statement                  go to state 171
    compound_statement         go to state 119
    labeled_statement          go to state 122
    selection_statement        go to state 123
    iteration_statement        go to state 124
    jump_statement             go to state 125
    expression                 go to state 126
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 103

   75 jump_statement: T_CONTINUE • T_SEMICOLON

    T_SEMICOLON  shift, and go to state 172


State 104

   74 jump_statement: T_GOTO • T_IDENTIFIER T_SEMICOLON

    T_IDENTIFIER  shift, and go to state 173


State 105

  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  129                 | T_SIZEOF • unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  130                 | T_SIZEOF • T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 174
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    unary_expression    go to state 175
    postfix_expression  go to state 141
    primary_expression  go to state 142


State 106

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
   35 type_name: • declaration_specifiers
   36          | • declaration_specifiers abstract_declarator
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  119                | T_LPAREN • type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN
  144                   | T_LPAREN • expression T_RPAREN
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER

    T_IDENTIFIER      shift, and go to state 143
    T_TYPENAME        shift, and go to state 1
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_INT             shift, and go to state 2
    T_STRUCT          shift, and go to state 3
    T_UNION           shift, and go to state 4
    T_ENUM            shift, and go to state 5
    T_CHAR            shift, and go to state 6
    T_FLOAT           shift, and go to state 7
    T_DOUBLE          shift, and go to state 8
    T_VOID            shift, and go to state 9
    T_SHORT           shift, and go to state 10
    T_LONG            shift, and go to state 11
    T_SIGNED          shift, and go to state 12
    T_UNSIGNED        shift, and go to state 13
    T_SIZEOF          shift, and go to state 105
    T_CONST           shift, and go to state 15
    T_STATIC          shift, and go to state 16
    T_EXTERN          shift, and go to state 17
    T_VOLATILE        shift, and go to state 18
    T_INLINE          shift, and go to state 19
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    declaration_specifiers     go to state 176
    type_name                  go to state 177
    expression                 go to state 178
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142
    type_specifier             go to state 26
    struct_specifier           go to state 27
    union_specifier            go to state 28
    enum_specifier             go to state 29


State 107

   55 compound_statement: T_LBRACE T_RBRACE •

    $default  reduce using rule 55 (compound_statement)


State 108

  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  121                 | T_INC • unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 179
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    unary_expression    go to state 180
    postfix_expression  go to state 141
    primary_expression  go to state 142


State 109

  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  122                 | T_DEC • unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 179
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    unary_expression    go to state 181
    postfix_expression  go to state 141
    primary_expression  go to state 142


State 110

  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  128                 | T_LOGICAL_NOT • cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    cast_expression     go to state 182
    unary_expression    go to state 153
    postfix_expression  go to state 141
    primary_expression  go to state 142


State 111

  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  127                 | T_BITWISE_NOT • cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    cast_expression     go to state 183
    unary_expression    go to state 153
    postfix_expression  go to state 141
    primary_expression  go to state 142


State 112

  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  123                 | T_BITWISE_AND • cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    cast_expression     go to state 184
    unary_expression    go to state 153
    postfix_expression  go to state 141
    primary_expression  go to state 142


State 113

  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  125                 | T_ADD • cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    cast_expression     go to state 185
    unary_expression    go to state 153
    postfix_expression  go to state 141
    primary_expression  go to state 142


State 114

  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  126                 | T_SUB • cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    cast_expression     go to state 186
    unary_expression    go to state 153
    postfix_expression  go to state 141
    primary_expression  go to state 142


State 115

  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  124                 | T_MUL • cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    cast_expression     go to state 187
    unary_expression    go to state 153
    postfix_expression  go to state 141
    primary_expression  go to state 142


State 116

   59 block_item: declaration •

    $default  reduce using rule 59 (block_item)


State 117

    7 declaration: declaration_specifiers • init_declarator_list T_SEMICOLON
    8            | declaration_specifiers • T_SEMICOLON
   16 init_declarator_list: • init_declarator
   17                     | • init_declarator_list T_COMMA init_declarator
   18 init_declarator: • declarator
   19                | • declarator T_ASSIGN initializer
   20 declarator: • pointer direct_declarator
   21           | • direct_declarator
   22 direct_declarator: • T_IDENTIFIER
   23                  | • T_LPAREN declarator T_RPAREN
   24                  | • direct_declarator T_LBRACKET conditional_expression T_RBRACKET
   25                  | • direct_declarator T_LBRACKET T_RBRACKET
   26                  | • direct_declarator T_LPAREN param_list T_RPAREN
   27                  | • direct_declarator T_LPAREN T_RPAREN
   28 pointer: • T_MUL
   29        | • T_MUL pointer

    T_IDENTIFIER  shift, and go to state 44
    T_SEMICOLON   shift, and go to state 45
    T_LPAREN      shift, and go to state 46
    T_MUL         shift, and go to state 47

    init_declarator_list  go to state 48
    init_declarator       go to state 49
    declarator            go to state 64
    direct_declarator     go to state 51
    pointer               go to state 52


State 118

   60 block_item: statement •

    $default  reduce using rule 60 (block_item)


State 119

   50 statement: compound_statement •

    $default  reduce using rule 50 (statement)


State 120

    7 declaration: • declaration_specifiers init_declarator_list T_SEMICOLON
    8            | • declaration_specifiers T_SEMICOLON
    9            | • T_TYPEDEF declaration_specifiers init_declarator_list T_SEMICOLON
   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
   49 statement: • labeled_statement
   50          | • compound_statement
   51          | • expression T_SEMICOLON
   52          | • selection_statement
   53          | • iteration_statement
   54          | • jump_statement
   55 compound_statement: • T_LBRACE T_RBRACE
   56                   | • T_LBRACE block_item_list T_RBRACE
   56                   | T_LBRACE block_item_list • T_RBRACE
   58 block_item_list: block_item_list • block_item
   59 block_item: • declaration
   60           | • statement
   61 labeled_statement: • T_IDENTIFIER ':' statement
   62                  | • T_CASE conditional_expression ':' statement
   63                  | • T_DEFAULT ':' statement
   64                  | • T_IDENTIFIER ':' T_SEMICOLON
   65 selection_statement: • T_IF T_LPAREN expression T_RPAREN statement
   66                    | • T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement
   67                    | • T_SWITCH T_LPAREN expression T_RPAREN statement
   68 iteration_statement: • T_WHILE T_LPAREN expression T_RPAREN statement
   69                    | • T_DO statement T_WHILE T_LPAREN expression T_RPAREN T_SEMICOLON
   70                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON T_RPAREN statement
   71                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement
   72                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON T_RPAREN statement
   73                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON expression T_RPAREN statement
   74 jump_statement: • T_GOTO T_IDENTIFIER T_SEMICOLON
   75               | • T_CONTINUE T_SEMICOLON
   76               | • T_BREAK T_SEMICOLON
   77               | • T_RETURN T_SEMICOLON
   78               | • T_RETURN expression T_SEMICOLON
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER

    T_IDENTIFIER      shift, and go to state 89
    T_TYPENAME        shift, and go to state 1
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_INT             shift, and go to state 2
    T_RETURN          shift, and go to state 94
    T_IF              shift, and go to state 95
    T_WHILE           shift, and go to state 96
    T_FOR             shift, and go to state 97
    T_SWITCH          shift, and go to state 98
    T_CASE            shift, and go to state 99
    T_DEFAULT         shift, and go to state 100
    T_BREAK           shift, and go to state 101
    T_DO              shift, and go to state 102
    T_CONTINUE        shift, and go to state 103
    T_GOTO            shift, and go to state 104
    T_STRUCT          shift, and go to state 3
    T_UNION           shift, and go to state 4
    T_ENUM            shift, and go to state 5
    T_CHAR            shift, and go to state 6
    T_FLOAT           shift, and go to state 7
    T_DOUBLE          shift, and go to state 8
    T_VOID            shift, and go to state 9
    T_SHORT           shift, and go to state 10
    T_LONG            shift, and go to state 11
    T_SIGNED          shift, and go to state 12
    T_UNSIGNED        shift, and go to state 13
    T_TYPEDEF         shift, and go to state 14
    T_SIZEOF          shift, and go to state 105
    T_CONST           shift, and go to state 15
    T_STATIC          shift, and go to state 16
    T_EXTERN          shift, and go to state 17
    T_VOLATILE        shift, and go to state 18
    T_INLINE          shift, and go to state 19
    T_LPAREN          shift, and go to state 106
    T_LBRACE          shift, and go to state 69
    T_RBRACE          shift, and go to state 188
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    declaration                go to state 116
    declaration_specifiers     go to state 117
    statement                  go to state 118
    compound_statement         go to state 119
    block_item                 go to state 189
    labeled_statement          go to state 122
    selection_statement        go to state 123
    iteration_statement        go to state 124
    jump_statement             go to state 125
    expression                 go to state 126
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142
    type_specifier             go to state 26
    struct_specifier           go to state 27
    union_specifier            go to state 28
    enum_specifier             go to state 29


State 121

   57 block_item_list: block_item •

    $default  reduce using rule 57 (block_item_list)


State 122

   49 statement: labeled_statement •

    $default  reduce using rule 49 (statement)


State 123

   52 statement: selection_statement •

    $default  reduce using rule 52 (statement)


State 124

   53 statement: iteration_statement •

    $default  reduce using rule 53 (statement)


State 125

   54 statement: jump_statement •

    $default  reduce using rule 54 (statement)


State 126

   51 statement: expression • T_SEMICOLON
   80 expression: expression • T_COMMA assignment_expression

    T_SEMICOLON  shift, and go to state 190
    T_COMMA      shift, and go to state 191


State 127

   79 expression: assignment_expression •

    $default  reduce using rule 79 (expression)


State 128

   81 assignment_expression: conditional_expression •

    $default  reduce using rule 81 (assignment_expression)


State 129

   88 conditional_expression: logical_or_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_COLON, ':']
   89                       | logical_or_expression • T_QUESTION expression T_COLON conditional_expression
   91 logical_or_expression: logical_or_expression • T_LOGICAL_OR logical_and_expression

    T_LOGICAL_OR  shift, and go to state 192
    T_QUESTION    shift, and go to state 193

    $default  reduce using rule 88 (conditional_expression)


State 130

   90 logical_or_expression: logical_and_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_OR, T_QUESTION, T_COLON, ':']
   93 logical_and_expression: logical_and_expression • T_LOGICAL_AND inclusive_or_expression

    T_LOGICAL_AND  shift, and go to state 194

    $default  reduce using rule 90 (logical_or_expression)


State 131

   92 logical_and_expression: inclusive_or_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_QUESTION, T_COLON, ':']
   95 inclusive_or_expression: inclusive_or_expression • T_BITWISE_OR exclusive_or_expression

    T_BITWISE_OR  shift, and go to state 195

    $default  reduce using rule 92 (logical_and_expression)


State 132

   94 inclusive_or_expression: exclusive_or_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_OR, T_QUESTION, T_COLON, ':']
   97 exclusive_or_expression: exclusive_or_expression • T_BITWISE_XOR and_expression

    T_BITWISE_XOR  shift, and go to state 196

    $default  reduce using rule 94 (inclusive_or_expression)


State 133

   96 exclusive_or_expression: and_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_OR, T_BITWISE_XOR, T_QUESTION, T_COLON, ':']
   99 and_expression: and_expression • T_BITWISE_AND equality_expression

    T_BITWISE_AND  shift, and go to state 197

    $default  reduce using rule 96 (exclusive_or_expression)


State 134

   98 and_expression: equality_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_QUESTION, T_COLON, ':']
  101 equality_expression: equality_expression • T_EQ relational_expression
  102                    | equality_expression • T_NE relational_expression

    T_EQ  shift, and go to state 198
    T_NE  shift, and go to state 199

    $default  reduce using rule 98 (and_expression)


State 135

  100 equality_expression: relational_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_EQ, T_NE, T_QUESTION, T_COLON, ':']
  104 relational_expression: relational_expression • T_LT shift_expression
  105                      | relational_expression • T_GT shift_expression
  106                      | relational_expression • T_LE shift_expression
  107                      | relational_expression • T_GE shift_expression

    T_GT  shift, and go to state 200
    T_GE  shift, and go to state 201
    T_LT  shift, and go to state 202
    T_LE  shift, and go to state 203

    $default  reduce using rule 100 (equality_expression)


State 136

  103 relational_expression: shift_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_EQ, T_NE, T_GT, T_GE, T_LT, T_LE, T_QUESTION, T_COLON, ':']
  109 shift_expression: shift_expression • T_LSHIFT additive_expression
  110                 | shift_expression • T_RSHIFT additive_expression

    T_LSHIFT  shift, and go to state 204
    T_RSHIFT  shift, and go to state 205

    $default  reduce using rule 103 (relational_expression)


State 137

  108 shift_expression: additive_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_LSHIFT, T_RSHIFT, T_EQ, T_NE, T_GT, T_GE, T_LT, T_LE, T_QUESTION, T_COLON, ':']
  112 additive_expression: additive_expression • T_ADD multiplicative_expression
  113                    | additive_expression • T_SUB multiplicative_expression

    T_ADD  shift, and go to state 206
    T_SUB  shift, and go to state 207

    $default  reduce using rule 108 (shift_expression)


State 138

  111 additive_expression: multiplicative_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_LSHIFT, T_RSHIFT, T_EQ, T_NE, T_GT, T_GE, T_LT, T_LE, T_ADD, T_SUB, T_QUESTION, T_COLON, ':']
  115 multiplicative_expression: multiplicative_expression • T_MUL cast_expression
  116                          | multiplicative_expression • T_DIV cast_expression
  117                          | multiplicative_expression • T_MOD cast_expression

    T_MUL  shift, and go to state 208
    T_DIV  shift, and go to state 209
    T_MOD  shift, and go to state 210

    $default  reduce using rule 111 (additive_expression)


State 139

  114 multiplicative_expression: cast_expression •

    $default  reduce using rule 114 (multiplicative_expression)


State 140

   82 assignment_expression: unary_expression • T_ASSIGN assignment_expression
   83                      | unary_expression • T_ADD_ASSIGN assignment_expression
   84                      | unary_expression • T_SUB_ASSIGN assignment_expression
   85                      | unary_expression • T_MUL_ASSIGN assignment_expression
   86                      | unary_expression • T_DIV_ASSIGN assignment_expression
   87                      | unary_expression • T_MOD_ASSIGN assignment_expression
  118 cast_expression: unary_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_LSHIFT, T_RSHIFT, T_EQ, T_NE, T_GT, T_GE, T_LT, T_LE, T_ADD, T_SUB, T_MUL, T_DIV, T_MOD, T_QUESTION, T_COLON]

    T_ASSIGN      shift, and go to state 211
    T_ADD_ASSIGN  shift, and go to state 212
    T_SUB_ASSIGN  shift, and go to state 213
    T_MUL_ASSIGN  shift, and go to state 214
    T_DIV_ASSIGN  shift, and go to state 215
    T_MOD_ASSIGN  shift, and go to state 216

    $default  reduce using rule 118 (cast_expression)


State 141

  120 unary_expression: postfix_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_LSHIFT, T_RSHIFT, T_ASSIGN, T_ADD_ASSIGN, T_SUB_ASSIGN, T_MUL_ASSIGN, T_DIV_ASSIGN, T_MOD_ASSIGN, T_EQ, T_NE, T_GT, T_GE, T_LT, T_LE, T_ADD, T_SUB, T_MUL, T_DIV, T_MOD, T_QUESTION, T_COLON, ':']
  132 postfix_expression: postfix_expression • T_LBRACKET expression T_RBRACKET
  133                   | postfix_expression • T_LPAREN T_RPAREN
  134                   | postfix_expression • T_LPAREN argument_expression_list T_RPAREN
  135                   | postfix_expression • T_DOT T_IDENTIFIER
  136                   | postfix_expression • T_ARROW T_IDENTIFIER
  137                   | postfix_expression • T_INC
  138                   | postfix_expression • T_DEC

    T_LPAREN    shift, and go to state 217
    T_LBRACKET  shift, and go to state 218
    T_DOT       shift, and go to state 219
    T_ARROW     shift, and go to state 220
    T_INC       shift, and go to state 221
    T_DEC       shift, and go to state 222

    $default  reduce using rule 120 (unary_expression)


State 142

  131 postfix_expression: primary_expression •

    $default  reduce using rule 131 (postfix_expression)


State 143

  139 primary_expression: T_IDENTIFIER •

    $default  reduce using rule 139 (primary_expression)


State 144

   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN
  147 initializer: • assignment_expression
  148            | • T_LBRACE initializer_list T_RBRACE
  148            | T_LBRACE • initializer_list T_RBRACE
  149            | • T_LBRACE initializer_list T_COMMA T_RBRACE
  149            | T_LBRACE • initializer_list T_COMMA T_RBRACE
  150 initializer_list: • initializer
  151                 | • initializer_list T_COMMA initializer

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_LBRACE          shift, and go to state 144
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    assignment_expression      go to state 145
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142
    initializer                go to state 223
    initializer_list           go to state 224


State 145

  147 initializer: assignment_expression •

    $default  reduce using rule 147 (initializer)


State 146

   19 init_declarator: declarator T_ASSIGN initializer •

    $default  reduce using rule 19 (init_declarator)


State 147

   27 direct_declarator: direct_declarator T_LPAREN T_RPAREN •

    $default  reduce using rule 27 (direct_declarator)


State 148

   20 declarator: • pointer direct_declarator
   21           | • direct_declarator
   22 direct_declarator: • T_IDENTIFIER
   23                  | • T_LPAREN declarator T_RPAREN
   24                  | • direct_declarator T_LBRACKET conditional_expression T_RBRACKET
   25                  | • direct_declarator T_LBRACKET T_RBRACKET
   26                  | • direct_declarator T_LPAREN param_list T_RPAREN
   27                  | • direct_declarator T_LPAREN T_RPAREN
   28 pointer: • T_MUL
   29        | • T_MUL pointer
   32 parameter_declaration: declaration_specifiers • declarator
   33                      | declaration_specifiers • abstract_declarator
   34                      | declaration_specifiers •  [T_RPAREN, T_COMMA]
   37 abstract_declarator: • pointer
   38                    | • direct_abstract_declarator
   39                    | • pointer direct_abstract_declarator
   40 direct_abstract_declarator: • T_LPAREN abstract_declarator T_RPAREN
   41                           | • T_LBRACKET T_RBRACKET
   42                           | • T_LBRACKET conditional_expression T_RBRACKET
   43                           | • direct_abstract_declarator T_LBRACKET T_RBRACKET
   44                           | • direct_abstract_declarator T_LBRACKET conditional_expression T_RBRACKET
   45                           | • T_LPAREN T_RPAREN
   46                           | • T_LPAREN param_list T_RPAREN
   47                           | • direct_abstract_declarator T_LPAREN T_RPAREN
   48                           | • direct_abstract_declarator T_LPAREN param_list T_RPAREN

    T_IDENTIFIER  shift, and go to state 44
    T_LPAREN      shift, and go to state 225
    T_LBRACKET    shift, and go to state 226
    T_MUL         shift, and go to state 47

    $default  reduce using rule 34 (parameter_declaration)

    declarator                  go to state 227
    direct_declarator           go to state 51
    pointer                     go to state 228
    abstract_declarator         go to state 229
    direct_abstract_declarator  go to state 230


State 149

   26 direct_declarator: direct_declarator T_LPAREN param_list • T_RPAREN
   31 param_list: param_list • T_COMMA parameter_declaration

    T_RPAREN  shift, and go to state 231
    T_COMMA   shift, and go to state 232


State 150

   30 param_list: parameter_declaration •

    $default  reduce using rule 30 (param_list)


State 151

   25 direct_declarator: direct_declarator T_LBRACKET T_RBRACKET •

    $default  reduce using rule 25 (direct_declarator)


State 152

   24 direct_declarator: direct_declarator T_LBRACKET conditional_expression • T_RBRACKET

    T_RBRACKET  shift, and go to state 233


State 153

  118 cast_expression: unary_expression •

    $default  reduce using rule 118 (cast_expression)


State 154

  165 struct_specifier: T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE •

    $default  reduce using rule 165 (struct_specifier)


State 155

  180 struct_declaration: declaration_specifiers declarator_list T_SEMICOLON •

    $default  reduce using rule 180 (struct_declaration)


State 156

   20 declarator: • pointer direct_declarator
   21           | • direct_declarator
   22 direct_declarator: • T_IDENTIFIER
   23                  | • T_LPAREN declarator T_RPAREN
   24                  | • direct_declarator T_LBRACKET conditional_expression T_RBRACKET
   25                  | • direct_declarator T_LBRACKET T_RBRACKET
   26                  | • direct_declarator T_LPAREN param_list T_RPAREN
   27                  | • direct_declarator T_LPAREN T_RPAREN
   28 pointer: • T_MUL
   29        | • T_MUL pointer
  182 declarator_list: declarator_list T_COMMA • declarator

    T_IDENTIFIER  shift, and go to state 44
    T_LPAREN      shift, and go to state 46
    T_MUL         shift, and go to state 47

    declarator         go to state 234
    direct_declarator  go to state 51
    pointer            go to state 52


State 157

  168 union_specifier: T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE •

    $default  reduce using rule 168 (union_specifier)


State 158

  171 enum_specifier: T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE •

    $default  reduce using rule 171 (enum_specifier)


State 159

  177 enumerator: T_IDENTIFIER T_ASSIGN conditional_expression •

    $default  reduce using rule 177 (enumerator)


State 160

  175 enumerator_list: enumerator_list T_COMMA enumerator •

    $default  reduce using rule 175 (enumerator_list)


State 161

   49 statement: • labeled_statement
   50          | • compound_statement
   51          | • expression T_SEMICOLON
   52          | • selection_statement
   53          | • iteration_statement
   54          | • jump_statement
   55 compound_statement: • T_LBRACE T_RBRACE
   56                   | • T_LBRACE block_item_list T_RBRACE
   61 labeled_statement: • T_IDENTIFIER ':' statement
   61                  | T_IDENTIFIER ':' • statement
   62                  | • T_CASE conditional_expression ':' statement
   63                  | • T_DEFAULT ':' statement
   64                  | • T_IDENTIFIER ':' T_SEMICOLON
   64                  | T_IDENTIFIER ':' • T_SEMICOLON
   65 selection_statement: • T_IF T_LPAREN expression T_RPAREN statement
   66                    | • T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement
   67                    | • T_SWITCH T_LPAREN expression T_RPAREN statement
   68 iteration_statement: • T_WHILE T_LPAREN expression T_RPAREN statement
   69                    | • T_DO statement T_WHILE T_LPAREN expression T_RPAREN T_SEMICOLON
   70                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON T_RPAREN statement
   71                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement
   72                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON T_RPAREN statement
   73                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON expression T_RPAREN statement
   74 jump_statement: • T_GOTO T_IDENTIFIER T_SEMICOLON
   75               | • T_CONTINUE T_SEMICOLON
   76               | • T_BREAK T_SEMICOLON
   77               | • T_RETURN T_SEMICOLON
   78               | • T_RETURN expression T_SEMICOLON
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 89
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_RETURN          shift, and go to state 94
    T_IF              shift, and go to state 95
    T_WHILE           shift, and go to state 96
    T_FOR             shift, and go to state 97
    T_SWITCH          shift, and go to state 98
    T_CASE            shift, and go to state 99
    T_DEFAULT         shift, and go to state 100
    T_BREAK           shift, and go to state 101
    T_DO              shift, and go to state 102
    T_CONTINUE        shift, and go to state 103
    T_GOTO            shift, and go to state 104
    T_SIZEOF          shift, and go to state 105
    T_SEMICOLON       shift, and go to state 235
    T_LPAREN          shift, and go to state 106
    T_LBRACE          shift, and go to state 69
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    statement                  go to state 236
    compound_statement         go to state 119
    labeled_statement          go to state 122
    selection_statement        go to state 123
    iteration_statement        go to state 124
    jump_statement             go to state 125
    expression                 go to state 126
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 162

   77 jump_statement: T_RETURN T_SEMICOLON •

    $default  reduce using rule 77 (jump_statement)


State 163

   78 jump_statement: T_RETURN expression • T_SEMICOLON
   80 expression: expression • T_COMMA assignment_expression

    T_SEMICOLON  shift, and go to state 237
    T_COMMA      shift, and go to state 191


State 164

   65 selection_statement: T_IF T_LPAREN • expression T_RPAREN statement
   66                    | T_IF T_LPAREN • expression T_RPAREN statement T_ELSE statement
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    expression                 go to state 238
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 165

   68 iteration_statement: T_WHILE T_LPAREN • expression T_RPAREN statement
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    expression                 go to state 239
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 166

    7 declaration: • declaration_specifiers init_declarator_list T_SEMICOLON
    8            | • declaration_specifiers T_SEMICOLON
    9            | • T_TYPEDEF declaration_specifiers init_declarator_list T_SEMICOLON
   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
   70 iteration_statement: T_FOR T_LPAREN • expression T_SEMICOLON expression T_SEMICOLON T_RPAREN statement
   71                    | T_FOR T_LPAREN • expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement
   72                    | T_FOR T_LPAREN • declaration expression T_SEMICOLON T_RPAREN statement
   73                    | T_FOR T_LPAREN • declaration expression T_SEMICOLON expression T_RPAREN statement
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER

    T_IDENTIFIER      shift, and go to state 143
    T_TYPENAME        shift, and go to state 1
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_INT             shift, and go to state 2
    T_STRUCT          shift, and go to state 3
    T_UNION           shift, and go to state 4
    T_ENUM            shift, and go to state 5
    T_CHAR            shift, and go to state 6
    T_FLOAT           shift, and go to state 7
    T_DOUBLE          shift, and go to state 8
    T_VOID            shift, and go to state 9
    T_SHORT           shift, and go to state 10
    T_LONG            shift, and go to state 11
    T_SIGNED          shift, and go to state 12
    T_UNSIGNED        shift, and go to state 13
    T_TYPEDEF         shift, and go to state 14
    T_SIZEOF          shift, and go to state 105
    T_CONST           shift, and go to state 15
    T_STATIC          shift, and go to state 16
    T_EXTERN          shift, and go to state 17
    T_VOLATILE        shift, and go to state 18
    T_INLINE          shift, and go to state 19
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    declaration                go to state 240
    declaration_specifiers     go to state 117
    expression                 go to state 241
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142
    type_specifier             go to state 26
    struct_specifier           go to state 27
    union_specifier            go to state 28
    enum_specifier             go to state 29


State 167

   67 selection_statement: T_SWITCH T_LPAREN • expression T_RPAREN statement
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    expression                 go to state 242
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 168

   62 labeled_statement: T_CASE conditional_expression • ':' statement

    ':'  shift, and go to state 243


State 169

   49 statement: • labeled_statement
   50          | • compound_statement
   51          | • expression T_SEMICOLON
   52          | • selection_statement
   53          | • iteration_statement
   54          | • jump_statement
   55 compound_statement: • T_LBRACE T_RBRACE
   56                   | • T_LBRACE block_item_list T_RBRACE
   61 labeled_statement: • T_IDENTIFIER ':' statement
   62                  | • T_CASE conditional_expression ':' statement
   63                  | • T_DEFAULT ':' statement
   63                  | T_DEFAULT ':' • statement
   64                  | • T_IDENTIFIER ':' T_SEMICOLON
   65 selection_statement: • T_IF T_LPAREN expression T_RPAREN statement
   66                    | • T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement
   67                    | • T_SWITCH T_LPAREN expression T_RPAREN statement
   68 iteration_statement: • T_WHILE T_LPAREN expression T_RPAREN statement
   69                    | • T_DO statement T_WHILE T_LPAREN expression T_RPAREN T_SEMICOLON
   70                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON T_RPAREN statement
   71                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement
   72                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON T_RPAREN statement
   73                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON expression T_RPAREN statement
   74 jump_statement: • T_GOTO T_IDENTIFIER T_SEMICOLON
   75               | • T_CONTINUE T_SEMICOLON
   76               | • T_BREAK T_SEMICOLON
   77               | • T_RETURN T_SEMICOLON
   78               | • T_RETURN expression T_SEMICOLON
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 89
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_RETURN          shift, and go to state 94
    T_IF              shift, and go to state 95
    T_WHILE           shift, and go to state 96
    T_FOR             shift, and go to state 97
    T_SWITCH          shift, and go to state 98
    T_CASE            shift, and go to state 99
    T_DEFAULT         shift, and go to state 100
    T_BREAK           shift, and go to state 101
    T_DO              shift, and go to state 102
    T_CONTINUE        shift, and go to state 103
    T_GOTO            shift, and go to state 104
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_LBRACE          shift, and go to state 69
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    statement                  go to state 244
    compound_statement         go to state 119
    labeled_statement          go to state 122
    selection_statement        go to state 123
    iteration_statement        go to state 124
    jump_statement             go to state 125
    expression                 go to state 126
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 170

   76 jump_statement: T_BREAK T_SEMICOLON •

    $default  reduce using rule 76 (jump_statement)


State 171

   69 iteration_statement: T_DO statement • T_WHILE T_LPAREN expression T_RPAREN T_SEMICOLON

    T_WHILE  shift, and go to state 245


State 172

   75 jump_statement: T_CONTINUE T_SEMICOLON •

    $default  reduce using rule 75 (jump_statement)


State 173

   74 jump_statement: T_GOTO T_IDENTIFIER • T_SEMICOLON

    T_SEMICOLON  shift, and go to state 246


State 174

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
   35 type_name: • declaration_specifiers
   36          | • declaration_specifiers abstract_declarator
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  130                 | T_SIZEOF T_LPAREN • type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN
  144                   | T_LPAREN • expression T_RPAREN
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER

    T_IDENTIFIER      shift, and go to state 143
    T_TYPENAME        shift, and go to state 1
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_INT             shift, and go to state 2
    T_STRUCT          shift, and go to state 3
    T_UNION           shift, and go to state 4
    T_ENUM            shift, and go to state 5
    T_CHAR            shift, and go to state 6
    T_FLOAT           shift, and go to state 7
    T_DOUBLE          shift, and go to state 8
    T_VOID            shift, and go to state 9
    T_SHORT           shift, and go to state 10
    T_LONG            shift, and go to state 11
    T_SIGNED          shift, and go to state 12
    T_UNSIGNED        shift, and go to state 13
    T_SIZEOF          shift, and go to state 105
    T_CONST           shift, and go to state 15
    T_STATIC          shift, and go to state 16
    T_EXTERN          shift, and go to state 17
    T_VOLATILE        shift, and go to state 18
    T_INLINE          shift, and go to state 19
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    declaration_specifiers     go to state 176
    type_name                  go to state 247
    expression                 go to state 178
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142
    type_specifier             go to state 26
    struct_specifier           go to state 27
    union_specifier            go to state 28
    enum_specifier             go to state 29


State 175

  129 unary_expression: T_SIZEOF unary_expression •

    $default  reduce using rule 129 (unary_expression)


State 176

   28 pointer: • T_MUL
   29        | • T_MUL pointer
   35 type_name: declaration_specifiers •  [T_RPAREN]
   36          | declaration_specifiers • abstract_declarator
   37 abstract_declarator: • pointer
   38                    | • direct_abstract_declarator
   39                    | • pointer direct_abstract_declarator
   40 direct_abstract_declarator: • T_LPAREN abstract_declarator T_RPAREN
   41                           | • T_LBRACKET T_RBRACKET
   42                           | • T_LBRACKET conditional_expression T_RBRACKET
   43                           | • direct_abstract_declarator T_LBRACKET T_RBRACKET
   44                           | • direct_abstract_declarator T_LBRACKET conditional_expression T_RBRACKET
   45                           | • T_LPAREN T_RPAREN
   46                           | • T_LPAREN param_list T_RPAREN
   47                           | • direct_abstract_declarator T_LPAREN T_RPAREN
   48                           | • direct_abstract_declarator T_LPAREN param_list T_RPAREN

    T_LPAREN    shift, and go to state 248
    T_LBRACKET  shift, and go to state 226
    T_MUL       shift, and go to state 47

    $default  reduce using rule 35 (type_name)

    pointer                     go to state 249
    abstract_declarator         go to state 250
    direct_abstract_declarator  go to state 230


State 177

  119 cast_expression: T_LPAREN type_name • T_RPAREN cast_expression

    T_RPAREN  shift, and go to state 251


State 178

   80 expression: expression • T_COMMA assignment_expression
  144 primary_expression: T_LPAREN expression • T_RPAREN

    T_RPAREN  shift, and go to state 252
    T_COMMA   shift, and go to state 191


State 179

   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN
  144                   | T_LPAREN • expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    expression                 go to state 178
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 180

  121 unary_expression: T_INC unary_expression •

    $default  reduce using rule 121 (unary_expression)


State 181

  122 unary_expression: T_DEC unary_expression •

    $default  reduce using rule 122 (unary_expression)


State 182

  128 unary_expression: T_LOGICAL_NOT cast_expression •

    $default  reduce using rule 128 (unary_expression)


State 183

  127 unary_expression: T_BITWISE_NOT cast_expression •

    $default  reduce using rule 127 (unary_expression)


State 184

  123 unary_expression: T_BITWISE_AND cast_expression •

    $default  reduce using rule 123 (unary_expression)


State 185

  125 unary_expression: T_ADD cast_expression •

    $default  reduce using rule 125 (unary_expression)


State 186

  126 unary_expression: T_SUB cast_expression •

    $default  reduce using rule 126 (unary_expression)


State 187

  124 unary_expression: T_MUL cast_expression •

    $default  reduce using rule 124 (unary_expression)


State 188

   56 compound_statement: T_LBRACE block_item_list T_RBRACE •

    $default  reduce using rule 56 (compound_statement)


State 189

   58 block_item_list: block_item_list block_item •

    $default  reduce using rule 58 (block_item_list)


State 190

   51 statement: expression T_SEMICOLON •

    $default  reduce using rule 51 (statement)


State 191

   80 expression: expression T_COMMA • assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    assignment_expression      go to state 253
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 192

   91 logical_or_expression: logical_or_expression T_LOGICAL_OR • logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    logical_and_expression     go to state 254
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 193

   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   89                       | logical_or_expression T_QUESTION • expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    expression                 go to state 255
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 194

   93 logical_and_expression: logical_and_expression T_LOGICAL_AND • inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    inclusive_or_expression    go to state 256
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 195

   95 inclusive_or_expression: inclusive_or_expression T_BITWISE_OR • exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    exclusive_or_expression    go to state 257
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 196

   97 exclusive_or_expression: exclusive_or_expression T_BITWISE_XOR • and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    and_expression             go to state 258
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 197

   99 and_expression: and_expression T_BITWISE_AND • equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    equality_expression        go to state 259
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 198

  101 equality_expression: equality_expression T_EQ • relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    relational_expression      go to state 260
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 199

  102 equality_expression: equality_expression T_NE • relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    relational_expression      go to state 261
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 200

  105 relational_expression: relational_expression T_GT • shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    shift_expression           go to state 262
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 201

  107 relational_expression: relational_expression T_GE • shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    shift_expression           go to state 263
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 202

  104 relational_expression: relational_expression T_LT • shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    shift_expression           go to state 264
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 203

  106 relational_expression: relational_expression T_LE • shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    shift_expression           go to state 265
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 204

  109 shift_expression: shift_expression T_LSHIFT • additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    additive_expression        go to state 266
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 205

  110 shift_expression: shift_expression T_RSHIFT • additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    additive_expression        go to state 267
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 206

  112 additive_expression: additive_expression T_ADD • multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    multiplicative_expression  go to state 268
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 207

  113 additive_expression: additive_expression T_SUB • multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    multiplicative_expression  go to state 269
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 208

  115 multiplicative_expression: multiplicative_expression T_MUL • cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    cast_expression     go to state 270
    unary_expression    go to state 153
    postfix_expression  go to state 141
    primary_expression  go to state 142


State 209

  116 multiplicative_expression: multiplicative_expression T_DIV • cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    cast_expression     go to state 271
    unary_expression    go to state 153
    postfix_expression  go to state 141
    primary_expression  go to state 142


State 210

  117 multiplicative_expression: multiplicative_expression T_MOD • cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    cast_expression     go to state 272
    unary_expression    go to state 153
    postfix_expression  go to state 141
    primary_expression  go to state 142


State 211

   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   82                      | unary_expression T_ASSIGN • assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    assignment_expression      go to state 273
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 212

   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   83                      | unary_expression T_ADD_ASSIGN • assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    assignment_expression      go to state 274
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 213

   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   84                      | unary_expression T_SUB_ASSIGN • assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    assignment_expression      go to state 275
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 214

   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   85                      | unary_expression T_MUL_ASSIGN • assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    assignment_expression      go to state 276
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 215

   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   86                      | unary_expression T_DIV_ASSIGN • assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    assignment_expression      go to state 277
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 216

   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   87                      | unary_expression T_MOD_ASSIGN • assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    assignment_expression      go to state 278
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 217

   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  133                   | postfix_expression T_LPAREN • T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  134                   | postfix_expression T_LPAREN • argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN
  145 argument_expression_list: • assignment_expression
  146                         | • argument_expression_list T_COMMA assignment_expression

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_RPAREN          shift, and go to state 279
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    assignment_expression      go to state 280
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142
    argument_expression_list   go to state 281


State 218

   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  132                   | postfix_expression T_LBRACKET • expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    expression                 go to state 282
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 219

  135 postfix_expression: postfix_expression T_DOT • T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 283


State 220

  136 postfix_expression: postfix_expression T_ARROW • T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 284


State 221

  137 postfix_expression: postfix_expression T_INC •

    $default  reduce using rule 137 (postfix_expression)


State 222

  138 postfix_expression: postfix_expression T_DEC •

    $default  reduce using rule 138 (postfix_expression)


State 223

  150 initializer_list: initializer •

    $default  reduce using rule 150 (initializer_list)


State 224

  148 initializer: T_LBRACE initializer_list • T_RBRACE
  149            | T_LBRACE initializer_list • T_COMMA T_RBRACE
  151 initializer_list: initializer_list • T_COMMA initializer

    T_RBRACE  shift, and go to state 285
    T_COMMA   shift, and go to state 286


State 225

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
   20 declarator: • pointer direct_declarator
   21           | • direct_declarator
   22 direct_declarator: • T_IDENTIFIER
   23                  | • T_LPAREN declarator T_RPAREN
   23                  | T_LPAREN • declarator T_RPAREN
   24                  | • direct_declarator T_LBRACKET conditional_expression T_RBRACKET
   25                  | • direct_declarator T_LBRACKET T_RBRACKET
   26                  | • direct_declarator T_LPAREN param_list T_RPAREN
   27                  | • direct_declarator T_LPAREN T_RPAREN
   28 pointer: • T_MUL
   29        | • T_MUL pointer
   30 param_list: • parameter_declaration
   31           | • param_list T_COMMA parameter_declaration
   32 parameter_declaration: • declaration_specifiers declarator
   33                      | • declaration_specifiers abstract_declarator
   34                      | • declaration_specifiers
   37 abstract_declarator: • pointer
   38                    | • direct_abstract_declarator
   39                    | • pointer direct_abstract_declarator
   40 direct_abstract_declarator: • T_LPAREN abstract_declarator T_RPAREN
   40                           | T_LPAREN • abstract_declarator T_RPAREN
   41                           | • T_LBRACKET T_RBRACKET
   42                           | • T_LBRACKET conditional_expression T_RBRACKET
   43                           | • direct_abstract_declarator T_LBRACKET T_RBRACKET
   44                           | • direct_abstract_declarator T_LBRACKET conditional_expression T_RBRACKET
   45                           | • T_LPAREN T_RPAREN
   45                           | T_LPAREN • T_RPAREN
   46                           | • T_LPAREN param_list T_RPAREN
   46                           | T_LPAREN • param_list T_RPAREN
   47                           | • direct_abstract_declarator T_LPAREN T_RPAREN
   48                           | • direct_abstract_declarator T_LPAREN param_list T_RPAREN
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 44
    T_TYPENAME    shift, and go to state 1
    T_INT         shift, and go to state 2
    T_STRUCT      shift, and go to state 3
    T_UNION       shift, and go to state 4
    T_ENUM        shift, and go to state 5
    T_CHAR        shift, and go to state 6
    T_FLOAT       shift, and go to state 7
    T_DOUBLE      shift, and go to state 8
    T_VOID        shift, and go to state 9
    T_SHORT       shift, and go to state 10
    T_LONG        shift, and go to state 11
    T_SIGNED      shift, and go to state 12
    T_UNSIGNED    shift, and go to state 13
    T_CONST       shift, and go to state 15
    T_STATIC      shift, and go to state 16
    T_EXTERN      shift, and go to state 17
    T_VOLATILE    shift, and go to state 18
    T_INLINE      shift, and go to state 19
    T_LPAREN      shift, and go to state 225
    T_RPAREN      shift, and go to state 287
    T_LBRACKET    shift, and go to state 226
    T_MUL         shift, and go to state 47

    declaration_specifiers      go to state 148
    declarator                  go to state 65
    direct_declarator           go to state 51
    pointer                     go to state 228
    param_list                  go to state 288
    parameter_declaration       go to state 150
    abstract_declarator         go to state 289
    direct_abstract_declarator  go to state 230
    type_specifier              go to state 26
    struct_specifier            go to state 27
    union_specifier             go to state 28
    enum_specifier              go to state 29


State 226

   41 direct_abstract_declarator: T_LBRACKET • T_RBRACKET
   42                           | T_LBRACKET • conditional_expression T_RBRACKET
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_RBRACKET        shift, and go to state 290
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    conditional_expression     go to state 291
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 227

   32 parameter_declaration: declaration_specifiers declarator •

    $default  reduce using rule 32 (parameter_declaration)


State 228

   20 declarator: pointer • direct_declarator
   22 direct_declarator: • T_IDENTIFIER
   23                  | • T_LPAREN declarator T_RPAREN
   24                  | • direct_declarator T_LBRACKET conditional_expression T_RBRACKET
   25                  | • direct_declarator T_LBRACKET T_RBRACKET
   26                  | • direct_declarator T_LPAREN param_list T_RPAREN
   27                  | • direct_declarator T_LPAREN T_RPAREN
   37 abstract_declarator: pointer •  [T_RPAREN, T_COMMA]
   39                    | pointer • direct_abstract_declarator
   40 direct_abstract_declarator: • T_LPAREN abstract_declarator T_RPAREN
   41                           | • T_LBRACKET T_RBRACKET
   42                           | • T_LBRACKET conditional_expression T_RBRACKET
   43                           | • direct_abstract_declarator T_LBRACKET T_RBRACKET
   44                           | • direct_abstract_declarator T_LBRACKET conditional_expression T_RBRACKET
   45                           | • T_LPAREN T_RPAREN
   46                           | • T_LPAREN param_list T_RPAREN
   47                           | • direct_abstract_declarator T_LPAREN T_RPAREN
   48                           | • direct_abstract_declarator T_LPAREN param_list T_RPAREN

    T_IDENTIFIER  shift, and go to state 44
    T_LPAREN      shift, and go to state 225
    T_LBRACKET    shift, and go to state 226

    $default  reduce using rule 37 (abstract_declarator)

    direct_declarator           go to state 74
    direct_abstract_declarator  go to state 292


State 229

   33 parameter_declaration: declaration_specifiers abstract_declarator •

    $default  reduce using rule 33 (parameter_declaration)


State 230

   38 abstract_declarator: direct_abstract_declarator •  [T_RPAREN, T_COMMA]
   43 direct_abstract_declarator: direct_abstract_declarator • T_LBRACKET T_RBRACKET
   44                           | direct_abstract_declarator • T_LBRACKET conditional_expression T_RBRACKET
   47                           | direct_abstract_declarator • T_LPAREN T_RPAREN
   48                           | direct_abstract_declarator • T_LPAREN param_list T_RPAREN

    T_LPAREN    shift, and go to state 293
    T_LBRACKET  shift, and go to state 294

    $default  reduce using rule 38 (abstract_declarator)


State 231

   26 direct_declarator: direct_declarator T_LPAREN param_list T_RPAREN •

    $default  reduce using rule 26 (direct_declarator)


State 232

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
   31 param_list: param_list T_COMMA • parameter_declaration
   32 parameter_declaration: • declaration_specifiers declarator
   33                      | • declaration_specifiers abstract_declarator
   34                      | • declaration_specifiers
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19

    declaration_specifiers  go to state 148
    parameter_declaration   go to state 295
    type_specifier          go to state 26
    struct_specifier        go to state 27
    union_specifier         go to state 28
    enum_specifier          go to state 29


State 233

   24 direct_declarator: direct_declarator T_LBRACKET conditional_expression T_RBRACKET •

    $default  reduce using rule 24 (direct_declarator)


State 234

  182 declarator_list: declarator_list T_COMMA declarator •

    $default  reduce using rule 182 (declarator_list)


State 235

   64 labeled_statement: T_IDENTIFIER ':' T_SEMICOLON •

    $default  reduce using rule 64 (labeled_statement)


State 236

   61 labeled_statement: T_IDENTIFIER ':' statement •

    $default  reduce using rule 61 (labeled_statement)


State 237

   78 jump_statement: T_RETURN expression T_SEMICOLON •

    $default  reduce using rule 78 (jump_statement)


State 238

   65 selection_statement: T_IF T_LPAREN expression • T_RPAREN statement
   66                    | T_IF T_LPAREN expression • T_RPAREN statement T_ELSE statement
   80 expression: expression • T_COMMA assignment_expression

    T_RPAREN  shift, and go to state 296
    T_COMMA   shift, and go to state 191


State 239

   68 iteration_statement: T_WHILE T_LPAREN expression • T_RPAREN statement
   80 expression: expression • T_COMMA assignment_expression

    T_RPAREN  shift, and go to state 297
    T_COMMA   shift, and go to state 191


State 240

   72 iteration_statement: T_FOR T_LPAREN declaration • expression T_SEMICOLON T_RPAREN statement
   73                    | T_FOR T_LPAREN declaration • expression T_SEMICOLON expression T_RPAREN statement
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    expression                 go to state 298
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 241

   70 iteration_statement: T_FOR T_LPAREN expression • T_SEMICOLON expression T_SEMICOLON T_RPAREN statement
   71                    | T_FOR T_LPAREN expression • T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement
   80 expression: expression • T_COMMA assignment_expression

    T_SEMICOLON  shift, and go to state 299
    T_COMMA      shift, and go to state 191


State 242

   67 selection_statement: T_SWITCH T_LPAREN expression • T_RPAREN statement
   80 expression: expression • T_COMMA assignment_expression

    T_RPAREN  shift, and go to state 300
    T_COMMA   shift, and go to state 191


State 243

   49 statement: • labeled_statement
   50          | • compound_statement
   51          | • expression T_SEMICOLON
   52          | • selection_statement
   53          | • iteration_statement
   54          | • jump_statement
   55 compound_statement: • T_LBRACE T_RBRACE
   56                   | • T_LBRACE block_item_list T_RBRACE
   61 labeled_statement: • T_IDENTIFIER ':' statement
   62                  | • T_CASE conditional_expression ':' statement
   62                  | T_CASE conditional_expression ':' • statement
   63                  | • T_DEFAULT ':' statement
   64                  | • T_IDENTIFIER ':' T_SEMICOLON
   65 selection_statement: • T_IF T_LPAREN expression T_RPAREN statement
   66                    | • T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement
   67                    | • T_SWITCH T_LPAREN expression T_RPAREN statement
   68 iteration_statement: • T_WHILE T_LPAREN expression T_RPAREN statement
   69                    | • T_DO statement T_WHILE T_LPAREN expression T_RPAREN T_SEMICOLON
   70                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON T_RPAREN statement
   71                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement
   72                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON T_RPAREN statement
   73                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON expression T_RPAREN statement
   74 jump_statement: • T_GOTO T_IDENTIFIER T_SEMICOLON
   75               | • T_CONTINUE T_SEMICOLON
   76               | • T_BREAK T_SEMICOLON
   77               | • T_RETURN T_SEMICOLON
   78               | • T_RETURN expression T_SEMICOLON
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 89
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_RETURN          shift, and go to state 94
    T_IF              shift, and go to state 95
    T_WHILE           shift, and go to state 96
    T_FOR             shift, and go to state 97
    T_SWITCH          shift, and go to state 98
    T_CASE            shift, and go to state 99
    T_DEFAULT         shift, and go to state 100
    T_BREAK           shift, and go to state 101
    T_DO              shift, and go to state 102
    T_CONTINUE        shift, and go to state 103
    T_GOTO            shift, and go to state 104
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_LBRACE          shift, and go to state 69
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    statement                  go to state 301
    compound_statement         go to state 119
    labeled_statement          go to state 122
    selection_statement        go to state 123
    iteration_statement        go to state 124
    jump_statement             go to state 125
    expression                 go to state 126
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 244

   63 labeled_statement: T_DEFAULT ':' statement •

    $default  reduce using rule 63 (labeled_statement)


State 245

   69 iteration_statement: T_DO statement T_WHILE • T_LPAREN expression T_RPAREN T_SEMICOLON

    T_LPAREN  shift, and go to state 302


State 246

   74 jump_statement: T_GOTO T_IDENTIFIER T_SEMICOLON •

    $default  reduce using rule 74 (jump_statement)


State 247

  130 unary_expression: T_SIZEOF T_LPAREN type_name • T_RPAREN

    T_RPAREN  shift, and go to state 303


State 248

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
   28 pointer: • T_MUL
   29        | • T_MUL pointer
   30 param_list: • parameter_declaration
   31           | • param_list T_COMMA parameter_declaration
   32 parameter_declaration: • declaration_specifiers declarator
   33                      | • declaration_specifiers abstract_declarator
   34                      | • declaration_specifiers
   37 abstract_declarator: • pointer
   38                    | • direct_abstract_declarator
   39                    | • pointer direct_abstract_declarator
   40 direct_abstract_declarator: • T_LPAREN abstract_declarator T_RPAREN
   40                           | T_LPAREN • abstract_declarator T_RPAREN
   41                           | • T_LBRACKET T_RBRACKET
   42                           | • T_LBRACKET conditional_expression T_RBRACKET
   43                           | • direct_abstract_declarator T_LBRACKET T_RBRACKET
   44                           | • direct_abstract_declarator T_LBRACKET conditional_expression T_RBRACKET
   45                           | • T_LPAREN T_RPAREN
   45                           | T_LPAREN • T_RPAREN
   46                           | • T_LPAREN param_list T_RPAREN
   46                           | T_LPAREN • param_list T_RPAREN
   47                           | • direct_abstract_declarator T_LPAREN T_RPAREN
   48                           | • direct_abstract_declarator T_LPAREN param_list T_RPAREN
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19
    T_LPAREN    shift, and go to state 248
    T_RPAREN    shift, and go to state 287
    T_LBRACKET  shift, and go to state 226
    T_MUL       shift, and go to state 47

    declaration_specifiers      go to state 148
    pointer                     go to state 249
    param_list                  go to state 288
    parameter_declaration       go to state 150
    abstract_declarator         go to state 289
    direct_abstract_declarator  go to state 230
    type_specifier              go to state 26
    struct_specifier            go to state 27
    union_specifier             go to state 28
    enum_specifier              go to state 29


State 249

   37 abstract_declarator: pointer •  [T_RPAREN]
   39                    | pointer • direct_abstract_declarator
   40 direct_abstract_declarator: • T_LPAREN abstract_declarator T_RPAREN
   41                           | • T_LBRACKET T_RBRACKET
   42                           | • T_LBRACKET conditional_expression T_RBRACKET
   43                           | • direct_abstract_declarator T_LBRACKET T_RBRACKET
   44                           | • direct_abstract_declarator T_LBRACKET conditional_expression T_RBRACKET
   45                           | • T_LPAREN T_RPAREN
   46                           | • T_LPAREN param_list T_RPAREN
   47                           | • direct_abstract_declarator T_LPAREN T_RPAREN
   48                           | • direct_abstract_declarator T_LPAREN param_list T_RPAREN

    T_LPAREN    shift, and go to state 248
    T_LBRACKET  shift, and go to state 226

    $default  reduce using rule 37 (abstract_declarator)

    direct_abstract_declarator  go to state 292


State 250

   36 type_name: declaration_specifiers abstract_declarator •

    $default  reduce using rule 36 (type_name)


State 251

  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  119                | T_LPAREN type_name T_RPAREN • cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    cast_expression     go to state 304
    unary_expression    go to state 153
    postfix_expression  go to state 141
    primary_expression  go to state 142


State 252

  144 primary_expression: T_LPAREN expression T_RPAREN •

    $default  reduce using rule 144 (primary_expression)


State 253

   80 expression: expression T_COMMA assignment_expression •

    $default  reduce using rule 80 (expression)


State 254

   91 logical_or_expression: logical_or_expression T_LOGICAL_OR logical_and_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_OR, T_QUESTION, T_COLON, ':']
   93 logical_and_expression: logical_and_expression • T_LOGICAL_AND inclusive_or_expression

    T_LOGICAL_AND  shift, and go to state 194

    $default  reduce using rule 91 (logical_or_expression)


State 255

   80 expression: expression • T_COMMA assignment_expression
   89 conditional_expression: logical_or_expression T_QUESTION expression • T_COLON conditional_expression

    T_COMMA  shift, and go to state 191
    T_COLON  shift, and go to state 305


State 256

   93 logical_and_expression: logical_and_expression T_LOGICAL_AND inclusive_or_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_QUESTION, T_COLON, ':']
   95 inclusive_or_expression: inclusive_or_expression • T_BITWISE_OR exclusive_or_expression

    T_BITWISE_OR  shift, and go to state 195

    $default  reduce using rule 93 (logical_and_expression)


State 257

   95 inclusive_or_expression: inclusive_or_expression T_BITWISE_OR exclusive_or_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_OR, T_QUESTION, T_COLON, ':']
   97 exclusive_or_expression: exclusive_or_expression • T_BITWISE_XOR and_expression

    T_BITWISE_XOR  shift, and go to state 196

    $default  reduce using rule 95 (inclusive_or_expression)


State 258

   97 exclusive_or_expression: exclusive_or_expression T_BITWISE_XOR and_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_OR, T_BITWISE_XOR, T_QUESTION, T_COLON, ':']
   99 and_expression: and_expression • T_BITWISE_AND equality_expression

    T_BITWISE_AND  shift, and go to state 197

    $default  reduce using rule 97 (exclusive_or_expression)


State 259

   99 and_expression: and_expression T_BITWISE_AND equality_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_QUESTION, T_COLON, ':']
  101 equality_expression: equality_expression • T_EQ relational_expression
  102                    | equality_expression • T_NE relational_expression

    T_EQ  shift, and go to state 198
    T_NE  shift, and go to state 199

    $default  reduce using rule 99 (and_expression)


State 260

  101 equality_expression: equality_expression T_EQ relational_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_EQ, T_NE, T_QUESTION, T_COLON, ':']
  104 relational_expression: relational_expression • T_LT shift_expression
  105                      | relational_expression • T_GT shift_expression
  106                      | relational_expression • T_LE shift_expression
  107                      | relational_expression • T_GE shift_expression

    T_GT  shift, and go to state 200
    T_GE  shift, and go to state 201
    T_LT  shift, and go to state 202
    T_LE  shift, and go to state 203

    $default  reduce using rule 101 (equality_expression)


State 261

  102 equality_expression: equality_expression T_NE relational_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_EQ, T_NE, T_QUESTION, T_COLON, ':']
  104 relational_expression: relational_expression • T_LT shift_expression
  105                      | relational_expression • T_GT shift_expression
  106                      | relational_expression • T_LE shift_expression
  107                      | relational_expression • T_GE shift_expression

    T_GT  shift, and go to state 200
    T_GE  shift, and go to state 201
    T_LT  shift, and go to state 202
    T_LE  shift, and go to state 203

    $default  reduce using rule 102 (equality_expression)


State 262

  105 relational_expression: relational_expression T_GT shift_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_EQ, T_NE, T_GT, T_GE, T_LT, T_LE, T_QUESTION, T_COLON, ':']
  109 shift_expression: shift_expression • T_LSHIFT additive_expression
  110                 | shift_expression • T_RSHIFT additive_expression

    T_LSHIFT  shift, and go to state 204
    T_RSHIFT  shift, and go to state 205

    $default  reduce using rule 105 (relational_expression)


State 263

  107 relational_expression: relational_expression T_GE shift_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_EQ, T_NE, T_GT, T_GE, T_LT, T_LE, T_QUESTION, T_COLON, ':']
  109 shift_expression: shift_expression • T_LSHIFT additive_expression
  110                 | shift_expression • T_RSHIFT additive_expression

    T_LSHIFT  shift, and go to state 204
    T_RSHIFT  shift, and go to state 205

    $default  reduce using rule 107 (relational_expression)


State 264

  104 relational_expression: relational_expression T_LT shift_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_EQ, T_NE, T_GT, T_GE, T_LT, T_LE, T_QUESTION, T_COLON, ':']
  109 shift_expression: shift_expression • T_LSHIFT additive_expression
  110                 | shift_expression • T_RSHIFT additive_expression

    T_LSHIFT  shift, and go to state 204
    T_RSHIFT  shift, and go to state 205

    $default  reduce using rule 104 (relational_expression)


State 265

  106 relational_expression: relational_expression T_LE shift_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_EQ, T_NE, T_GT, T_GE, T_LT, T_LE, T_QUESTION, T_COLON, ':']
  109 shift_expression: shift_expression • T_LSHIFT additive_expression
  110                 | shift_expression • T_RSHIFT additive_expression

    T_LSHIFT  shift, and go to state 204
    T_RSHIFT  shift, and go to state 205

    $default  reduce using rule 106 (relational_expression)


State 266

  109 shift_expression: shift_expression T_LSHIFT additive_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_LSHIFT, T_RSHIFT, T_EQ, T_NE, T_GT, T_GE, T_LT, T_LE, T_QUESTION, T_COLON, ':']
  112 additive_expression: additive_expression • T_ADD multiplicative_expression
  113                    | additive_expression • T_SUB multiplicative_expression

    T_ADD  shift, and go to state 206
    T_SUB  shift, and go to state 207

    $default  reduce using rule 109 (shift_expression)


State 267

  110 shift_expression: shift_expression T_RSHIFT additive_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_LSHIFT, T_RSHIFT, T_EQ, T_NE, T_GT, T_GE, T_LT, T_LE, T_QUESTION, T_COLON, ':']
  112 additive_expression: additive_expression • T_ADD multiplicative_expression
  113                    | additive_expression • T_SUB multiplicative_expression

    T_ADD  shift, and go to state 206
    T_SUB  shift, and go to state 207

    $default  reduce using rule 110 (shift_expression)


State 268

  112 additive_expression: additive_expression T_ADD multiplicative_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_LSHIFT, T_RSHIFT, T_EQ, T_NE, T_GT, T_GE, T_LT, T_LE, T_ADD, T_SUB, T_QUESTION, T_COLON, ':']
  115 multiplicative_expression: multiplicative_expression • T_MUL cast_expression
  116                          | multiplicative_expression • T_DIV cast_expression
  117                          | multiplicative_expression • T_MOD cast_expression

    T_MUL  shift, and go to state 208
    T_DIV  shift, and go to state 209
    T_MOD  shift, and go to state 210

    $default  reduce using rule 112 (additive_expression)


State 269

  113 additive_expression: additive_expression T_SUB multiplicative_expression •  [T_SEMICOLON, T_RPAREN, T_RBRACE, T_COMMA, T_RBRACKET, T_LOGICAL_AND, T_LOGICAL_OR, T_BITWISE_AND, T_BITWISE_OR, T_BITWISE_XOR, T_LSHIFT, T_RSHIFT, T_EQ, T_NE, T_GT, T_GE, T_LT, T_LE, T_ADD, T_SUB, T_QUESTION, T_COLON, ':']
  115 multiplicative_expression: multiplicative_expression • T_MUL cast_expression
  116                          | multiplicative_expression • T_DIV cast_expression
  117                          | multiplicative_expression • T_MOD cast_expression

    T_MUL  shift, and go to state 208
    T_DIV  shift, and go to state 209
    T_MOD  shift, and go to state 210

    $default  reduce using rule 113 (additive_expression)


State 270

  115 multiplicative_expression: multiplicative_expression T_MUL cast_expression •

    $default  reduce using rule 115 (multiplicative_expression)


State 271

  116 multiplicative_expression: multiplicative_expression T_DIV cast_expression •

    $default  reduce using rule 116 (multiplicative_expression)


State 272

  117 multiplicative_expression: multiplicative_expression T_MOD cast_expression •

    $default  reduce using rule 117 (multiplicative_expression)


State 273

   82 assignment_expression: unary_expression T_ASSIGN assignment_expression •

    $default  reduce using rule 82 (assignment_expression)


State 274

   83 assignment_expression: unary_expression T_ADD_ASSIGN assignment_expression •

    $default  reduce using rule 83 (assignment_expression)


State 275

   84 assignment_expression: unary_expression T_SUB_ASSIGN assignment_expression •

    $default  reduce using rule 84 (assignment_expression)


State 276

   85 assignment_expression: unary_expression T_MUL_ASSIGN assignment_expression •

    $default  reduce using rule 85 (assignment_expression)


State 277

   86 assignment_expression: unary_expression T_DIV_ASSIGN assignment_expression •

    $default  reduce using rule 86 (assignment_expression)


State 278

   87 assignment_expression: unary_expression T_MOD_ASSIGN assignment_expression •

    $default  reduce using rule 87 (assignment_expression)


State 279

  133 postfix_expression: postfix_expression T_LPAREN T_RPAREN •

    $default  reduce using rule 133 (postfix_expression)


State 280

  145 argument_expression_list: assignment_expression •

    $default  reduce using rule 145 (argument_expression_list)


State 281

  134 postfix_expression: postfix_expression T_LPAREN argument_expression_list • T_RPAREN
  146 argument_expression_list: argument_expression_list • T_COMMA assignment_expression

    T_RPAREN  shift, and go to state 306
    T_COMMA   shift, and go to state 307


State 282

   80 expression: expression • T_COMMA assignment_expression
  132 postfix_expression: postfix_expression T_LBRACKET expression • T_RBRACKET

    T_COMMA     shift, and go to state 191
    T_RBRACKET  shift, and go to state 308


State 283

  135 postfix_expression: postfix_expression T_DOT T_IDENTIFIER •

    $default  reduce using rule 135 (postfix_expression)


State 284

  136 postfix_expression: postfix_expression T_ARROW T_IDENTIFIER •

    $default  reduce using rule 136 (postfix_expression)


State 285

  148 initializer: T_LBRACE initializer_list T_RBRACE •

    $default  reduce using rule 148 (initializer)


State 286

   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN
  147 initializer: • assignment_expression
  148            | • T_LBRACE initializer_list T_RBRACE
  149            | • T_LBRACE initializer_list T_COMMA T_RBRACE
  149            | T_LBRACE initializer_list T_COMMA • T_RBRACE
  151 initializer_list: initializer_list T_COMMA • initializer

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_LBRACE          shift, and go to state 144
    T_RBRACE          shift, and go to state 309
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    assignment_expression      go to state 145
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142
    initializer                go to state 310


State 287

   45 direct_abstract_declarator: T_LPAREN T_RPAREN •

    $default  reduce using rule 45 (direct_abstract_declarator)


State 288

   31 param_list: param_list • T_COMMA parameter_declaration
   46 direct_abstract_declarator: T_LPAREN param_list • T_RPAREN

    T_RPAREN  shift, and go to state 311
    T_COMMA   shift, and go to state 232


State 289

   40 direct_abstract_declarator: T_LPAREN abstract_declarator • T_RPAREN

    T_RPAREN  shift, and go to state 312


State 290

   41 direct_abstract_declarator: T_LBRACKET T_RBRACKET •

    $default  reduce using rule 41 (direct_abstract_declarator)


State 291

   42 direct_abstract_declarator: T_LBRACKET conditional_expression • T_RBRACKET

    T_RBRACKET  shift, and go to state 313


State 292

   39 abstract_declarator: pointer direct_abstract_declarator •  [T_RPAREN, T_COMMA]
   43 direct_abstract_declarator: direct_abstract_declarator • T_LBRACKET T_RBRACKET
   44                           | direct_abstract_declarator • T_LBRACKET conditional_expression T_RBRACKET
   47                           | direct_abstract_declarator • T_LPAREN T_RPAREN
   48                           | direct_abstract_declarator • T_LPAREN param_list T_RPAREN

    T_LPAREN    shift, and go to state 293
    T_LBRACKET  shift, and go to state 294

    $default  reduce using rule 39 (abstract_declarator)


State 293

   10 declaration_specifiers: • type_specifier
   11                       | • T_CONST declaration_specifiers
   12                       | • T_STATIC declaration_specifiers
   13                       | • T_EXTERN declaration_specifiers
   14                       | • T_VOLATILE declaration_specifiers
   15                       | • T_INLINE declaration_specifiers
   30 param_list: • parameter_declaration
   31           | • param_list T_COMMA parameter_declaration
   32 parameter_declaration: • declaration_specifiers declarator
   33                      | • declaration_specifiers abstract_declarator
   34                      | • declaration_specifiers
   47 direct_abstract_declarator: direct_abstract_declarator T_LPAREN • T_RPAREN
   48                           | direct_abstract_declarator T_LPAREN • param_list T_RPAREN
  152 type_specifier: • T_VOID
  153               | • T_CHAR
  154               | • T_SHORT
  155               | • T_INT
  156               | • T_LONG
  157               | • T_FLOAT
  158               | • T_DOUBLE
  159               | • T_SIGNED
  160               | • T_UNSIGNED
  161               | • struct_specifier
  162               | • union_specifier
  163               | • enum_specifier
  164               | • T_TYPENAME
  165 struct_specifier: • T_STRUCT T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  166                 | • T_STRUCT T_LBRACE struct_declaration_list T_RBRACE
  167                 | • T_STRUCT T_IDENTIFIER
  168 union_specifier: • T_UNION T_IDENTIFIER T_LBRACE struct_declaration_list T_RBRACE
  169                | • T_UNION T_LBRACE struct_declaration_list T_RBRACE
  170                | • T_UNION T_IDENTIFIER
  171 enum_specifier: • T_ENUM T_IDENTIFIER T_LBRACE enumerator_list T_RBRACE
  172               | • T_ENUM T_LBRACE enumerator_list T_RBRACE
  173               | • T_ENUM T_IDENTIFIER

    T_TYPENAME  shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRUCT    shift, and go to state 3
    T_UNION     shift, and go to state 4
    T_ENUM      shift, and go to state 5
    T_CHAR      shift, and go to state 6
    T_FLOAT     shift, and go to state 7
    T_DOUBLE    shift, and go to state 8
    T_VOID      shift, and go to state 9
    T_SHORT     shift, and go to state 10
    T_LONG      shift, and go to state 11
    T_SIGNED    shift, and go to state 12
    T_UNSIGNED  shift, and go to state 13
    T_CONST     shift, and go to state 15
    T_STATIC    shift, and go to state 16
    T_EXTERN    shift, and go to state 17
    T_VOLATILE  shift, and go to state 18
    T_INLINE    shift, and go to state 19
    T_RPAREN    shift, and go to state 314

    declaration_specifiers  go to state 148
    param_list              go to state 315
    parameter_declaration   go to state 150
    type_specifier          go to state 26
    struct_specifier        go to state 27
    union_specifier         go to state 28
    enum_specifier          go to state 29


State 294

   43 direct_abstract_declarator: direct_abstract_declarator T_LBRACKET • T_RBRACKET
   44                           | direct_abstract_declarator T_LBRACKET • conditional_expression T_RBRACKET
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_RBRACKET        shift, and go to state 316
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    conditional_expression     go to state 317
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 295

   31 param_list: param_list T_COMMA parameter_declaration •

    $default  reduce using rule 31 (param_list)


State 296

   49 statement: • labeled_statement
   50          | • compound_statement
   51          | • expression T_SEMICOLON
   52          | • selection_statement
   53          | • iteration_statement
   54          | • jump_statement
   55 compound_statement: • T_LBRACE T_RBRACE
   56                   | • T_LBRACE block_item_list T_RBRACE
   61 labeled_statement: • T_IDENTIFIER ':' statement
   62                  | • T_CASE conditional_expression ':' statement
   63                  | • T_DEFAULT ':' statement
   64                  | • T_IDENTIFIER ':' T_SEMICOLON
   65 selection_statement: • T_IF T_LPAREN expression T_RPAREN statement
   65                    | T_IF T_LPAREN expression T_RPAREN • statement
   66                    | • T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement
   66                    | T_IF T_LPAREN expression T_RPAREN • statement T_ELSE statement
   67                    | • T_SWITCH T_LPAREN expression T_RPAREN statement
   68 iteration_statement: • T_WHILE T_LPAREN expression T_RPAREN statement
   69                    | • T_DO statement T_WHILE T_LPAREN expression T_RPAREN T_SEMICOLON
   70                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON T_RPAREN statement
   71                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement
   72                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON T_RPAREN statement
   73                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON expression T_RPAREN statement
   74 jump_statement: • T_GOTO T_IDENTIFIER T_SEMICOLON
   75               | • T_CONTINUE T_SEMICOLON
   76               | • T_BREAK T_SEMICOLON
   77               | • T_RETURN T_SEMICOLON
   78               | • T_RETURN expression T_SEMICOLON
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 89
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_RETURN          shift, and go to state 94
    T_IF              shift, and go to state 95
    T_WHILE           shift, and go to state 96
    T_FOR             shift, and go to state 97
    T_SWITCH          shift, and go to state 98
    T_CASE            shift, and go to state 99
    T_DEFAULT         shift, and go to state 100
    T_BREAK           shift, and go to state 101
    T_DO              shift, and go to state 102
    T_CONTINUE        shift, and go to state 103
    T_GOTO            shift, and go to state 104
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_LBRACE          shift, and go to state 69
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    statement                  go to state 318
    compound_statement         go to state 119
    labeled_statement          go to state 122
    selection_statement        go to state 123
    iteration_statement        go to state 124
    jump_statement             go to state 125
    expression                 go to state 126
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 297

   49 statement: • labeled_statement
   50          | • compound_statement
   51          | • expression T_SEMICOLON
   52          | • selection_statement
   53          | • iteration_statement
   54          | • jump_statement
   55 compound_statement: • T_LBRACE T_RBRACE
   56                   | • T_LBRACE block_item_list T_RBRACE
   61 labeled_statement: • T_IDENTIFIER ':' statement
   62                  | • T_CASE conditional_expression ':' statement
   63                  | • T_DEFAULT ':' statement
   64                  | • T_IDENTIFIER ':' T_SEMICOLON
   65 selection_statement: • T_IF T_LPAREN expression T_RPAREN statement
   66                    | • T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement
   67                    | • T_SWITCH T_LPAREN expression T_RPAREN statement
   68 iteration_statement: • T_WHILE T_LPAREN expression T_RPAREN statement
   68                    | T_WHILE T_LPAREN expression T_RPAREN • statement
   69                    | • T_DO statement T_WHILE T_LPAREN expression T_RPAREN T_SEMICOLON
   70                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON T_RPAREN statement
   71                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement
   72                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON T_RPAREN statement
   73                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON expression T_RPAREN statement
   74 jump_statement: • T_GOTO T_IDENTIFIER T_SEMICOLON
   75               | • T_CONTINUE T_SEMICOLON
   76               | • T_BREAK T_SEMICOLON
   77               | • T_RETURN T_SEMICOLON
   78               | • T_RETURN expression T_SEMICOLON
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 89
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_RETURN          shift, and go to state 94
    T_IF              shift, and go to state 95
    T_WHILE           shift, and go to state 96
    T_FOR             shift, and go to state 97
    T_SWITCH          shift, and go to state 98
    T_CASE            shift, and go to state 99
    T_DEFAULT         shift, and go to state 100
    T_BREAK           shift, and go to state 101
    T_DO              shift, and go to state 102
    T_CONTINUE        shift, and go to state 103
    T_GOTO            shift, and go to state 104
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_LBRACE          shift, and go to state 69
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    statement                  go to state 319
    compound_statement         go to state 119
    labeled_statement          go to state 122
    selection_statement        go to state 123
    iteration_statement        go to state 124
    jump_statement             go to state 125
    expression                 go to state 126
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 298

   72 iteration_statement: T_FOR T_LPAREN declaration expression • T_SEMICOLON T_RPAREN statement
   73                    | T_FOR T_LPAREN declaration expression • T_SEMICOLON expression T_RPAREN statement
   80 expression: expression • T_COMMA assignment_expression

    T_SEMICOLON  shift, and go to state 320
    T_COMMA      shift, and go to state 191


State 299

   70 iteration_statement: T_FOR T_LPAREN expression T_SEMICOLON • expression T_SEMICOLON T_RPAREN statement
   71                    | T_FOR T_LPAREN expression T_SEMICOLON • expression T_SEMICOLON expression T_RPAREN statement
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    expression                 go to state 321
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 300

   49 statement: • labeled_statement
   50          | • compound_statement
   51          | • expression T_SEMICOLON
   52          | • selection_statement
   53          | • iteration_statement
   54          | • jump_statement
   55 compound_statement: • T_LBRACE T_RBRACE
   56                   | • T_LBRACE block_item_list T_RBRACE
   61 labeled_statement: • T_IDENTIFIER ':' statement
   62                  | • T_CASE conditional_expression ':' statement
   63                  | • T_DEFAULT ':' statement
   64                  | • T_IDENTIFIER ':' T_SEMICOLON
   65 selection_statement: • T_IF T_LPAREN expression T_RPAREN statement
   66                    | • T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement
   67                    | • T_SWITCH T_LPAREN expression T_RPAREN statement
   67                    | T_SWITCH T_LPAREN expression T_RPAREN • statement
   68 iteration_statement: • T_WHILE T_LPAREN expression T_RPAREN statement
   69                    | • T_DO statement T_WHILE T_LPAREN expression T_RPAREN T_SEMICOLON
   70                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON T_RPAREN statement
   71                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement
   72                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON T_RPAREN statement
   73                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON expression T_RPAREN statement
   74 jump_statement: • T_GOTO T_IDENTIFIER T_SEMICOLON
   75               | • T_CONTINUE T_SEMICOLON
   76               | • T_BREAK T_SEMICOLON
   77               | • T_RETURN T_SEMICOLON
   78               | • T_RETURN expression T_SEMICOLON
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 89
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_RETURN          shift, and go to state 94
    T_IF              shift, and go to state 95
    T_WHILE           shift, and go to state 96
    T_FOR             shift, and go to state 97
    T_SWITCH          shift, and go to state 98
    T_CASE            shift, and go to state 99
    T_DEFAULT         shift, and go to state 100
    T_BREAK           shift, and go to state 101
    T_DO              shift, and go to state 102
    T_CONTINUE        shift, and go to state 103
    T_GOTO            shift, and go to state 104
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_LBRACE          shift, and go to state 69
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    statement                  go to state 322
    compound_statement         go to state 119
    labeled_statement          go to state 122
    selection_statement        go to state 123
    iteration_statement        go to state 124
    jump_statement             go to state 125
    expression                 go to state 126
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 301

   62 labeled_statement: T_CASE conditional_expression ':' statement •

    $default  reduce using rule 62 (labeled_statement)


State 302

   69 iteration_statement: T_DO statement T_WHILE T_LPAREN • expression T_RPAREN T_SEMICOLON
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    expression                 go to state 323
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 303

  130 unary_expression: T_SIZEOF T_LPAREN type_name T_RPAREN •

    $default  reduce using rule 130 (unary_expression)


State 304

  119 cast_expression: T_LPAREN type_name T_RPAREN cast_expression •

    $default  reduce using rule 119 (cast_expression)


State 305

   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   89                       | logical_or_expression T_QUESTION expression T_COLON • conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    conditional_expression     go to state 324
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 153
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 306

  134 postfix_expression: postfix_expression T_LPAREN argument_expression_list T_RPAREN •

    $default  reduce using rule 134 (postfix_expression)


State 307

   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN
  146 argument_expression_list: argument_expression_list T_COMMA • assignment_expression

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    assignment_expression      go to state 325
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 308

  132 postfix_expression: postfix_expression T_LBRACKET expression T_RBRACKET •

    $default  reduce using rule 132 (postfix_expression)


State 309

  149 initializer: T_LBRACE initializer_list T_COMMA T_RBRACE •

    $default  reduce using rule 149 (initializer)


State 310

  151 initializer_list: initializer_list T_COMMA initializer •

    $default  reduce using rule 151 (initializer_list)


State 311

   46 direct_abstract_declarator: T_LPAREN param_list T_RPAREN •

    $default  reduce using rule 46 (direct_abstract_declarator)


State 312

   40 direct_abstract_declarator: T_LPAREN abstract_declarator T_RPAREN •

    $default  reduce using rule 40 (direct_abstract_declarator)


State 313

   42 direct_abstract_declarator: T_LBRACKET conditional_expression T_RBRACKET •

    $default  reduce using rule 42 (direct_abstract_declarator)


State 314

   47 direct_abstract_declarator: direct_abstract_declarator T_LPAREN T_RPAREN •

    $default  reduce using rule 47 (direct_abstract_declarator)


State 315

   31 param_list: param_list • T_COMMA parameter_declaration
   48 direct_abstract_declarator: direct_abstract_declarator T_LPAREN param_list • T_RPAREN

    T_RPAREN  shift, and go to state 326
    T_COMMA   shift, and go to state 232


State 316

   43 direct_abstract_declarator: direct_abstract_declarator T_LBRACKET T_RBRACKET •

    $default  reduce using rule 43 (direct_abstract_declarator)


State 317

   44 direct_abstract_declarator: direct_abstract_declarator T_LBRACKET conditional_expression • T_RBRACKET

    T_RBRACKET  shift, and go to state 327


State 318

   65 selection_statement: T_IF T_LPAREN expression T_RPAREN statement •  [T_IDENTIFIER, T_TYPENAME, T_INTEGER, T_FLOAT_LITERAL, T_CHAR_LITERAL, T_STRING_LITERAL, T_INT, T_RETURN, T_IF, T_WHILE, T_FOR, T_SWITCH, T_CASE, T_DEFAULT, T_BREAK, T_DO, T_CONTINUE, T_GOTO, T_STRUCT, T_UNION, T_ENUM, T_CHAR, T_FLOAT, T_DOUBLE, T_VOID, T_SHORT, T_LONG, T_SIGNED, T_UNSIGNED, T_TYPEDEF, T_SIZEOF, T_CONST, T_STATIC, T_EXTERN, T_VOLATILE, T_INLINE, T_LPAREN, T_LBRACE, T_RBRACE, T_INC, T_DEC, T_LOGICAL_NOT, T_BITWISE_NOT, T_BITWISE_AND, T_ADD, T_SUB, T_MUL]
   66                    | T_IF T_LPAREN expression T_RPAREN statement • T_ELSE statement

    T_ELSE  shift, and go to state 328

    $default  reduce using rule 65 (selection_statement)

    Conflict between rule 65 and token T_ELSE resolved as shift (T_IFX < T_ELSE).


State 319

   68 iteration_statement: T_WHILE T_LPAREN expression T_RPAREN statement •

    $default  reduce using rule 68 (iteration_statement)


State 320

   72 iteration_statement: T_FOR T_LPAREN declaration expression T_SEMICOLON • T_RPAREN statement
   73                    | T_FOR T_LPAREN declaration expression T_SEMICOLON • expression T_RPAREN statement
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_RPAREN          shift, and go to state 329
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    expression                 go to state 330
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 321

   70 iteration_statement: T_FOR T_LPAREN expression T_SEMICOLON expression • T_SEMICOLON T_RPAREN statement
   71                    | T_FOR T_LPAREN expression T_SEMICOLON expression • T_SEMICOLON expression T_RPAREN statement
   80 expression: expression • T_COMMA assignment_expression

    T_SEMICOLON  shift, and go to state 331
    T_COMMA      shift, and go to state 191


State 322

   67 selection_statement: T_SWITCH T_LPAREN expression T_RPAREN statement •

    $default  reduce using rule 67 (selection_statement)


State 323

   69 iteration_statement: T_DO statement T_WHILE T_LPAREN expression • T_RPAREN T_SEMICOLON
   80 expression: expression • T_COMMA assignment_expression

    T_RPAREN  shift, and go to state 332
    T_COMMA   shift, and go to state 191


State 324

   89 conditional_expression: logical_or_expression T_QUESTION expression T_COLON conditional_expression •

    $default  reduce using rule 89 (conditional_expression)


State 325

  146 argument_expression_list: argument_expression_list T_COMMA assignment_expression •

    $default  reduce using rule 146 (argument_expression_list)


State 326

   48 direct_abstract_declarator: direct_abstract_declarator T_LPAREN param_list T_RPAREN •

    $default  reduce using rule 48 (direct_abstract_declarator)


State 327

   44 direct_abstract_declarator: direct_abstract_declarator T_LBRACKET conditional_expression T_RBRACKET •

    $default  reduce using rule 44 (direct_abstract_declarator)


State 328

   49 statement: • labeled_statement
   50          | • compound_statement
   51          | • expression T_SEMICOLON
   52          | • selection_statement
   53          | • iteration_statement
   54          | • jump_statement
   55 compound_statement: • T_LBRACE T_RBRACE
   56                   | • T_LBRACE block_item_list T_RBRACE
   61 labeled_statement: • T_IDENTIFIER ':' statement
   62                  | • T_CASE conditional_expression ':' statement
   63                  | • T_DEFAULT ':' statement
   64                  | • T_IDENTIFIER ':' T_SEMICOLON
   65 selection_statement: • T_IF T_LPAREN expression T_RPAREN statement
   66                    | • T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement
   66                    | T_IF T_LPAREN expression T_RPAREN statement T_ELSE • statement
   67                    | • T_SWITCH T_LPAREN expression T_RPAREN statement
   68 iteration_statement: • T_WHILE T_LPAREN expression T_RPAREN statement
   69                    | • T_DO statement T_WHILE T_LPAREN expression T_RPAREN T_SEMICOLON
   70                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON T_RPAREN statement
   71                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement
   72                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON T_RPAREN statement
   73                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON expression T_RPAREN statement
   74 jump_statement: • T_GOTO T_IDENTIFIER T_SEMICOLON
   75               | • T_CONTINUE T_SEMICOLON
   76               | • T_BREAK T_SEMICOLON
   77               | • T_RETURN T_SEMICOLON
   78               | • T_RETURN expression T_SEMICOLON
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 89
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_RETURN          shift, and go to state 94
    T_IF              shift, and go to state 95
    T_WHILE           shift, and go to state 96
    T_FOR             shift, and go to state 97
    T_SWITCH          shift, and go to state 98
    T_CASE            shift, and go to state 99
    T_DEFAULT         shift, and go to state 100
    T_BREAK           shift, and go to state 101
    T_DO              shift, and go to state 102
    T_CONTINUE        shift, and go to state 103
    T_GOTO            shift, and go to state 104
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_LBRACE          shift, and go to state 69
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    statement                  go to state 333
    compound_statement         go to state 119
    labeled_statement          go to state 122
    selection_statement        go to state 123
    iteration_statement        go to state 124
    jump_statement             go to state 125
    expression                 go to state 126
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 329

   49 statement: • labeled_statement
   50          | • compound_statement
   51          | • expression T_SEMICOLON
   52          | • selection_statement
   53          | • iteration_statement
   54          | • jump_statement
   55 compound_statement: • T_LBRACE T_RBRACE
   56                   | • T_LBRACE block_item_list T_RBRACE
   61 labeled_statement: • T_IDENTIFIER ':' statement
   62                  | • T_CASE conditional_expression ':' statement
   63                  | • T_DEFAULT ':' statement
   64                  | • T_IDENTIFIER ':' T_SEMICOLON
   65 selection_statement: • T_IF T_LPAREN expression T_RPAREN statement
   66                    | • T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement
   67                    | • T_SWITCH T_LPAREN expression T_RPAREN statement
   68 iteration_statement: • T_WHILE T_LPAREN expression T_RPAREN statement
   69                    | • T_DO statement T_WHILE T_LPAREN expression T_RPAREN T_SEMICOLON
   70                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON T_RPAREN statement
   71                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement
   72                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON T_RPAREN statement
   72                    | T_FOR T_LPAREN declaration expression T_SEMICOLON T_RPAREN • statement
   73                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON expression T_RPAREN statement
   74 jump_statement: • T_GOTO T_IDENTIFIER T_SEMICOLON
   75               | • T_CONTINUE T_SEMICOLON
   76               | • T_BREAK T_SEMICOLON
   77               | • T_RETURN T_SEMICOLON
   78               | • T_RETURN expression T_SEMICOLON
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 89
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_RETURN          shift, and go to state 94
    T_IF              shift, and go to state 95
    T_WHILE           shift, and go to state 96
    T_FOR             shift, and go to state 97
    T_SWITCH          shift, and go to state 98
    T_CASE            shift, and go to state 99
    T_DEFAULT         shift, and go to state 100
    T_BREAK           shift, and go to state 101
    T_DO              shift, and go to state 102
    T_CONTINUE        shift, and go to state 103
    T_GOTO            shift, and go to state 104
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_LBRACE          shift, and go to state 69
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    statement                  go to state 334
    compound_statement         go to state 119
    labeled_statement          go to state 122
    selection_statement        go to state 123
    iteration_statement        go to state 124
    jump_statement             go to state 125
    expression                 go to state 126
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 330

   73 iteration_statement: T_FOR T_LPAREN declaration expression T_SEMICOLON expression • T_RPAREN statement
   80 expression: expression • T_COMMA assignment_expression

    T_RPAREN  shift, and go to state 335
    T_COMMA   shift, and go to state 191


State 331

   70 iteration_statement: T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON • T_RPAREN statement
   71                    | T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON • expression T_RPAREN statement
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 143
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_RPAREN          shift, and go to state 336
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    expression                 go to state 337
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 332

   69 iteration_statement: T_DO statement T_WHILE T_LPAREN expression T_RPAREN • T_SEMICOLON

    T_SEMICOLON  shift, and go to state 338


State 333

   66 selection_statement: T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement •

    $default  reduce using rule 66 (selection_statement)


State 334

   72 iteration_statement: T_FOR T_LPAREN declaration expression T_SEMICOLON T_RPAREN statement •

    $default  reduce using rule 72 (iteration_statement)


State 335

   49 statement: • labeled_statement
   50          | • compound_statement
   51          | • expression T_SEMICOLON
   52          | • selection_statement
   53          | • iteration_statement
   54          | • jump_statement
   55 compound_statement: • T_LBRACE T_RBRACE
   56                   | • T_LBRACE block_item_list T_RBRACE
   61 labeled_statement: • T_IDENTIFIER ':' statement
   62                  | • T_CASE conditional_expression ':' statement
   63                  | • T_DEFAULT ':' statement
   64                  | • T_IDENTIFIER ':' T_SEMICOLON
   65 selection_statement: • T_IF T_LPAREN expression T_RPAREN statement
   66                    | • T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement
   67                    | • T_SWITCH T_LPAREN expression T_RPAREN statement
   68 iteration_statement: • T_WHILE T_LPAREN expression T_RPAREN statement
   69                    | • T_DO statement T_WHILE T_LPAREN expression T_RPAREN T_SEMICOLON
   70                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON T_RPAREN statement
   71                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement
   72                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON T_RPAREN statement
   73                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON expression T_RPAREN statement
   73                    | T_FOR T_LPAREN declaration expression T_SEMICOLON expression T_RPAREN • statement
   74 jump_statement: • T_GOTO T_IDENTIFIER T_SEMICOLON
   75               | • T_CONTINUE T_SEMICOLON
   76               | • T_BREAK T_SEMICOLON
   77               | • T_RETURN T_SEMICOLON
   78               | • T_RETURN expression T_SEMICOLON
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 89
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_RETURN          shift, and go to state 94
    T_IF              shift, and go to state 95
    T_WHILE           shift, and go to state 96
    T_FOR             shift, and go to state 97
    T_SWITCH          shift, and go to state 98
    T_CASE            shift, and go to state 99
    T_DEFAULT         shift, and go to state 100
    T_BREAK           shift, and go to state 101
    T_DO              shift, and go to state 102
    T_CONTINUE        shift, and go to state 103
    T_GOTO            shift, and go to state 104
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_LBRACE          shift, and go to state 69
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    statement                  go to state 339
    compound_statement         go to state 119
    labeled_statement          go to state 122
    selection_statement        go to state 123
    iteration_statement        go to state 124
    jump_statement             go to state 125
    expression                 go to state 126
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 336

   49 statement: • labeled_statement
   50          | • compound_statement
   51          | • expression T_SEMICOLON
   52          | • selection_statement
   53          | • iteration_statement
   54          | • jump_statement
   55 compound_statement: • T_LBRACE T_RBRACE
   56                   | • T_LBRACE block_item_list T_RBRACE
   61 labeled_statement: • T_IDENTIFIER ':' statement
   62                  | • T_CASE conditional_expression ':' statement
   63                  | • T_DEFAULT ':' statement
   64                  | • T_IDENTIFIER ':' T_SEMICOLON
   65 selection_statement: • T_IF T_LPAREN expression T_RPAREN statement
   66                    | • T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement
   67                    | • T_SWITCH T_LPAREN expression T_RPAREN statement
   68 iteration_statement: • T_WHILE T_LPAREN expression T_RPAREN statement
   69                    | • T_DO statement T_WHILE T_LPAREN expression T_RPAREN T_SEMICOLON
   70                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON T_RPAREN statement
   70                    | T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON T_RPAREN • statement
   71                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement
   72                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON T_RPAREN statement
   73                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON expression T_RPAREN statement
   74 jump_statement: • T_GOTO T_IDENTIFIER T_SEMICOLON
   75               | • T_CONTINUE T_SEMICOLON
   76               | • T_BREAK T_SEMICOLON
   77               | • T_RETURN T_SEMICOLON
   78               | • T_RETURN expression T_SEMICOLON
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 89
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_RETURN          shift, and go to state 94
    T_IF              shift, and go to state 95
    T_WHILE           shift, and go to state 96
    T_FOR             shift, and go to state 97
    T_SWITCH          shift, and go to state 98
    T_CASE            shift, and go to state 99
    T_DEFAULT         shift, and go to state 100
    T_BREAK           shift, and go to state 101
    T_DO              shift, and go to state 102
    T_CONTINUE        shift, and go to state 103
    T_GOTO            shift, and go to state 104
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_LBRACE          shift, and go to state 69
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    statement                  go to state 340
    compound_statement         go to state 119
    labeled_statement          go to state 122
    selection_statement        go to state 123
    iteration_statement        go to state 124
    jump_statement             go to state 125
    expression                 go to state 126
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 337

   71 iteration_statement: T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression • T_RPAREN statement
   80 expression: expression • T_COMMA assignment_expression

    T_RPAREN  shift, and go to state 341
    T_COMMA   shift, and go to state 191


State 338

   69 iteration_statement: T_DO statement T_WHILE T_LPAREN expression T_RPAREN T_SEMICOLON •

    $default  reduce using rule 69 (iteration_statement)


State 339

   73 iteration_statement: T_FOR T_LPAREN declaration expression T_SEMICOLON expression T_RPAREN statement •

    $default  reduce using rule 73 (iteration_statement)


State 340

   70 iteration_statement: T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON T_RPAREN statement •

    $default  reduce using rule 70 (iteration_statement)


State 341

   49 statement: • labeled_statement
   50          | • compound_statement
   51          | • expression T_SEMICOLON
   52          | • selection_statement
   53          | • iteration_statement
   54          | • jump_statement
   55 compound_statement: • T_LBRACE T_RBRACE
   56                   | • T_LBRACE block_item_list T_RBRACE
   61 labeled_statement: • T_IDENTIFIER ':' statement
   62                  | • T_CASE conditional_expression ':' statement
   63                  | • T_DEFAULT ':' statement
   64                  | • T_IDENTIFIER ':' T_SEMICOLON
   65 selection_statement: • T_IF T_LPAREN expression T_RPAREN statement
   66                    | • T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement
   67                    | • T_SWITCH T_LPAREN expression T_RPAREN statement
   68 iteration_statement: • T_WHILE T_LPAREN expression T_RPAREN statement
   69                    | • T_DO statement T_WHILE T_LPAREN expression T_RPAREN T_SEMICOLON
   70                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON T_RPAREN statement
   71                    | • T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement
   71                    | T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN • statement
   72                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON T_RPAREN statement
   73                    | • T_FOR T_LPAREN declaration expression T_SEMICOLON expression T_RPAREN statement
   74 jump_statement: • T_GOTO T_IDENTIFIER T_SEMICOLON
   75               | • T_CONTINUE T_SEMICOLON
   76               | • T_BREAK T_SEMICOLON
   77               | • T_RETURN T_SEMICOLON
   78               | • T_RETURN expression T_SEMICOLON
   79 expression: • assignment_expression
   80           | • expression T_COMMA assignment_expression
   81 assignment_expression: • conditional_expression
   82                      | • unary_expression T_ASSIGN assignment_expression
   83                      | • unary_expression T_ADD_ASSIGN assignment_expression
   84                      | • unary_expression T_SUB_ASSIGN assignment_expression
   85                      | • unary_expression T_MUL_ASSIGN assignment_expression
   86                      | • unary_expression T_DIV_ASSIGN assignment_expression
   87                      | • unary_expression T_MOD_ASSIGN assignment_expression
   88 conditional_expression: • logical_or_expression
   89                       | • logical_or_expression T_QUESTION expression T_COLON conditional_expression
   90 logical_or_expression: • logical_and_expression
   91                      | • logical_or_expression T_LOGICAL_OR logical_and_expression
   92 logical_and_expression: • inclusive_or_expression
   93                       | • logical_and_expression T_LOGICAL_AND inclusive_or_expression
   94 inclusive_or_expression: • exclusive_or_expression
   95                        | • inclusive_or_expression T_BITWISE_OR exclusive_or_expression
   96 exclusive_or_expression: • and_expression
   97                        | • exclusive_or_expression T_BITWISE_XOR and_expression
   98 and_expression: • equality_expression
   99               | • and_expression T_BITWISE_AND equality_expression
  100 equality_expression: • relational_expression
  101                    | • equality_expression T_EQ relational_expression
  102                    | • equality_expression T_NE relational_expression
  103 relational_expression: • shift_expression
  104                      | • relational_expression T_LT shift_expression
  105                      | • relational_expression T_GT shift_expression
  106                      | • relational_expression T_LE shift_expression
  107                      | • relational_expression T_GE shift_expression
  108 shift_expression: • additive_expression
  109                 | • shift_expression T_LSHIFT additive_expression
  110                 | • shift_expression T_RSHIFT additive_expression
  111 additive_expression: • multiplicative_expression
  112                    | • additive_expression T_ADD multiplicative_expression
  113                    | • additive_expression T_SUB multiplicative_expression
  114 multiplicative_expression: • cast_expression
  115                          | • multiplicative_expression T_MUL cast_expression
  116                          | • multiplicative_expression T_DIV cast_expression
  117                          | • multiplicative_expression T_MOD cast_expression
  118 cast_expression: • unary_expression
  119                | • T_LPAREN type_name T_RPAREN cast_expression
  120 unary_expression: • postfix_expression
  121                 | • T_INC unary_expression
  122                 | • T_DEC unary_expression
  123                 | • T_BITWISE_AND cast_expression
  124                 | • T_MUL cast_expression
  125                 | • T_ADD cast_expression
  126                 | • T_SUB cast_expression
  127                 | • T_BITWISE_NOT cast_expression
  128                 | • T_LOGICAL_NOT cast_expression
  129                 | • T_SIZEOF unary_expression
  130                 | • T_SIZEOF T_LPAREN type_name T_RPAREN
  131 postfix_expression: • primary_expression
  132                   | • postfix_expression T_LBRACKET expression T_RBRACKET
  133                   | • postfix_expression T_LPAREN T_RPAREN
  134                   | • postfix_expression T_LPAREN argument_expression_list T_RPAREN
  135                   | • postfix_expression T_DOT T_IDENTIFIER
  136                   | • postfix_expression T_ARROW T_IDENTIFIER
  137                   | • postfix_expression T_INC
  138                   | • postfix_expression T_DEC
  139 primary_expression: • T_IDENTIFIER
  140                   | • T_INTEGER
  141                   | • T_FLOAT_LITERAL
  142                   | • T_CHAR_LITERAL
  143                   | • T_STRING_LITERAL
  144                   | • T_LPAREN expression T_RPAREN

    T_IDENTIFIER      shift, and go to state 89
    T_INTEGER         shift, and go to state 90
    T_FLOAT_LITERAL   shift, and go to state 91
    T_CHAR_LITERAL    shift, and go to state 92
    T_STRING_LITERAL  shift, and go to state 93
    T_RETURN          shift, and go to state 94
    T_IF              shift, and go to state 95
    T_WHILE           shift, and go to state 96
    T_FOR             shift, and go to state 97
    T_SWITCH          shift, and go to state 98
    T_CASE            shift, and go to state 99
    T_DEFAULT         shift, and go to state 100
    T_BREAK           shift, and go to state 101
    T_DO              shift, and go to state 102
    T_CONTINUE        shift, and go to state 103
    T_GOTO            shift, and go to state 104
    T_SIZEOF          shift, and go to state 105
    T_LPAREN          shift, and go to state 106
    T_LBRACE          shift, and go to state 69
    T_INC             shift, and go to state 108
    T_DEC             shift, and go to state 109
    T_LOGICAL_NOT     shift, and go to state 110
    T_BITWISE_NOT     shift, and go to state 111
    T_BITWISE_AND     shift, and go to state 112
    T_ADD             shift, and go to state 113
    T_SUB             shift, and go to state 114
    T_MUL             shift, and go to state 115

    statement                  go to state 342
    compound_statement         go to state 119
    labeled_statement          go to state 122
    selection_statement        go to state 123
    iteration_statement        go to state 124
    jump_statement             go to state 125
    expression                 go to state 126
    assignment_expression      go to state 127
    conditional_expression     go to state 128
    logical_or_expression      go to state 129
    logical_and_expression     go to state 130
    inclusive_or_expression    go to state 131
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    cast_expression            go to state 139
    unary_expression           go to state 140
    postfix_expression         go to state 141
    primary_expression         go to state 142


State 342

   71 iteration_statement: T_FOR T_LPAREN expression T_SEMICOLON expression T_SEMICOLON expression T_RPAREN statement •

    $default  reduce using rule 71 (iteration_statement)
